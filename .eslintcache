[{"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\index.js":"1","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js":"2","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js":"3","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\searchContext.js":"4","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js":"5","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js":"6","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js":"7","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js":"8","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js":"9","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js":"10","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js":"11","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js":"12","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js":"13","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js":"14","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js":"15","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\config.js":"16","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSLectureEditor\\index.js":"17","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDropdown\\index.js":"18","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSTagEditor\\index.js":"19","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSTimestampSelector\\index.js":"20","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSVideoSelector\\index.js":"21","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FilterBox\\index.js":"22","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js":"23","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js":"24","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDescription\\index.js":"25","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSMenu\\index.js":"26","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Footer\\index.js":"27","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackViewer\\index.js":"28","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDrawerMenu\\index.js":"29"},{"size":913,"mtime":1610767417044,"results":"30","hashOfConfig":"31"},{"size":375,"mtime":1610767417044,"results":"32","hashOfConfig":"31"},{"size":492,"mtime":1610767417037,"results":"33","hashOfConfig":"31"},{"size":2722,"mtime":1610932427211,"results":"34","hashOfConfig":"31"},{"size":668,"mtime":1610767417039,"results":"35","hashOfConfig":"31"},{"size":1887,"mtime":1610933209828,"results":"36","hashOfConfig":"31"},{"size":475,"mtime":1610767417039,"results":"37","hashOfConfig":"31"},{"size":159,"mtime":1610767417038,"results":"38","hashOfConfig":"31"},{"size":7523,"mtime":1610941445176,"results":"39","hashOfConfig":"31"},{"size":22785,"mtime":1610916863730,"results":"40","hashOfConfig":"31"},{"size":512,"mtime":1610767417034,"results":"41","hashOfConfig":"31"},{"size":174,"mtime":1610767417034,"results":"42","hashOfConfig":"31"},{"size":2378,"mtime":1610934937433,"results":"43","hashOfConfig":"31"},{"size":5379,"mtime":1610941839567,"results":"44","hashOfConfig":"31"},{"size":3507,"mtime":1610767417033,"results":"45","hashOfConfig":"31"},{"size":1342,"mtime":1610929664532,"results":"46","hashOfConfig":"31"},{"size":6106,"mtime":1610767417027,"results":"47","hashOfConfig":"31"},{"size":1128,"mtime":1610767417027,"results":"48","hashOfConfig":"31"},{"size":5512,"mtime":1610767417028,"results":"49","hashOfConfig":"31"},{"size":5911,"mtime":1610767417029,"results":"50","hashOfConfig":"31"},{"size":9137,"mtime":1610941375198,"results":"51","hashOfConfig":"31"},{"size":2639,"mtime":1610933861006,"results":"52","hashOfConfig":"31"},{"size":3865,"mtime":1610767417030,"results":"53","hashOfConfig":"31"},{"size":294,"mtime":1610934979999,"results":"54","hashOfConfig":"31"},{"size":835,"mtime":1610767417027,"results":"55","hashOfConfig":"31"},{"size":1351,"mtime":1610767417028,"results":"56","hashOfConfig":"31"},{"size":3968,"mtime":1610935861023,"results":"57","hashOfConfig":"31"},{"size":1209,"mtime":1610820021022,"results":"58","hashOfConfig":"31"},{"size":1859,"mtime":1610779564654,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1xx296r",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\index.js",[],["124","125"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\searchContext.js",["126"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js",["127"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js",["128","129"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  DatePicker,\r\n  InputNumber,\r\n  Space,\r\n  Select,\r\n  Switch,\r\n  message,\r\n  Row,\r\n  Col,\r\n  Divider,\r\n} from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { SearchContext } from \"../../contexts/searchContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport TimestampSelector from \"../CoachCMSTimestampSelector\";\r\nimport config from \"../../config\";\r\nimport CmsVideoSelector from \"../CoachCMSVideoSelector\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport CmsTagEditor from \"../CoachCMSTagEditor\";\r\nimport CmsLecturerEditor from \"../CoachCMSLectureEditor\";\r\nimport moment from \"moment\";\r\nimport DrawerToolsMenu from \"../CoachCMSDrawerMenu\";\r\n\r\n//global required field rules object, default false\r\nconst ruleSetRequired = [\r\n  {\r\n    required: true,\r\n    message: \"Input required\",\r\n  },\r\n];\r\n\r\n//simple layout configuation objects\r\nconst formLayout = {\r\n  labelCol: {\r\n    span: 24,\r\n  },\r\n  wrapperCol: {\r\n    span: 24,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 0,\r\n    span: 24,\r\n  },\r\n};\r\n\r\n//start of component function\r\nfunction CoachCMS() {\r\n  const [tags, setTags] = useState([]); //used for tags field\r\n  const { searchText } = useContext(SearchContext);\r\n  const [previousSearch] = useState(searchText);\r\n  const [guestLecturer, setGuestLecturer] = useState(false);\r\n  const [tutorialVideo, setTutorialVideo] = useState(false);\r\n  const [timestampsVisible, setTimestampsVisible] = useState(false);\r\n  const [timestampVideoUrl, setTimestampVideoUrl] = useState(false);\r\n  const [timestampData, setTimestampData] = useState(\"\");\r\n  const [form] = Form.useForm();\r\n\r\n  const [tagEditorVisible, setTagEditorVisible] = useState(false);\r\n  const [tagData, setTagData] = useState(false);\r\n  const [lastTagId, setLastTagId] = useState(null);\r\n\r\n  const [lecturerEditorVisible, setLecturerEditorVisible] = useState(false);\r\n  const [lecturerData, setLecturerData] = useState(false);\r\n  const [lastLecturerId, setLastLecturerId] = useState(null);\r\n  const [modeSelector, setModeSelector] = useState(true);\r\n  const [pageOutput, setPageOutput] = useState(false);\r\n  const [editTimestampData, setEditTimestampData] = useState(null);\r\n\r\n  //tag data and last tag ID from db\r\n  useEffect(() => {\r\n    const getTagData = async () => {\r\n      const resTagData = await fetch(config.BACKEND_URL_TAGS_GET_ALL_DATA);\r\n      const data = await resTagData.json();\r\n\r\n      setTagData(data.sort((a, b) => a.tag - b.tag));\r\n\r\n      const resLastKey = await fetch(config.BACKEND_URL_TAGS_LASTKEY);\r\n      const keydata = await resLastKey.json();\r\n\r\n      setLastTagId(Number(keydata[0].last_value));\r\n    };\r\n    getTagData();\r\n  }, [tagEditorVisible]);\r\n\r\n  //lecturer data and last tag ID from db\r\n  useEffect(() => {\r\n    const getLecturerData = async () => {\r\n      const resLecturerData = await fetch(\r\n        config.BACKEND_URL_LECTURERS_GET_ALL_DATA\r\n      );\r\n      const data = await resLecturerData.json();\r\n      setLecturerData(data.sort((a, b) => a.lecturer - b.lecturer));\r\n\r\n      const resLastKey = await fetch(config.BACKEND_URL_LECTURERS_LASTKEY);\r\n      const keydata = await resLastKey.json();\r\n\r\n      setLastLecturerId(Number(keydata[0].last_value));\r\n\r\n      if (data.length > 0) {\r\n        let tempTagData = data.sort((a, b) => a.key - b.key);\r\n        setLastLecturerId(tempTagData[tempTagData.length - 1].key);\r\n      }\r\n    };\r\n    getLecturerData();\r\n  }, [lecturerEditorVisible]);\r\n\r\n  useEffect(() => {\r\n    const additionalTags = tags.filter(\r\n      (tag) => tag !== \"lecture\" && tag !== \"guest lecture\"\r\n    );\r\n\r\n    if (additionalTags.length > 0 && !guestLecturer) {\r\n      setTags([...additionalTags, \"lecture\"]);\r\n    } else if (additionalTags.length > 0 && guestLecturer) {\r\n      setTags([...additionalTags, \"guest lecture\"]);\r\n    } else if (additionalTags.length === 0 && !guestLecturer) {\r\n      setTags([\"lecture\"]);\r\n    } else if (additionalTags.length === 0 && guestLecturer) {\r\n      setTags([\"guest lecture\"]);\r\n    }\r\n  }, [guestLecturer]);\r\n\r\n  useEffect(() => {\r\n    const additionalTags = tags.filter((tag) => tag !== \"tutorial\");\r\n\r\n    if (additionalTags.length > 0 && !tutorialVideo) {\r\n      setTags([...additionalTags]);\r\n    } else if (additionalTags.length > 0 && tutorialVideo) {\r\n      setTags([...additionalTags, \"tutorial\"]);\r\n    }\r\n  }, [tutorialVideo]);\r\n\r\n  if (searchText !== previousSearch) {\r\n    return <Redirect exact to=\"/\" />;\r\n  }\r\n\r\n  const { Option } = Select;\r\n  //set form data from api video selector\r\n  const setFormVideoData = (selectData) => {\r\n    form.resetFields();\r\n    setTags([\"lecture\"]);\r\n    setEditTimestampData([]);\r\n    setTimestampVideoUrl(selectData.url);\r\n    setEditTimestampData(selectData.timestamps);\r\n    setTimestampData(selectData.timestamps);\r\n    //TODO guest lecturer switch\r\n    //TODO tutorial switch\r\n    if (modeSelector) {\r\n      form.setFieldsValue({\r\n        title: selectData.title,\r\n        video_url: selectData.url,\r\n        thumbnail_url: selectData.thumbnail,\r\n      });\r\n    } else {\r\n      form.setFieldsValue({\r\n        id: selectData.id,\r\n        title: selectData.title,\r\n        lecturer: selectData.lecturer,\r\n        video_url: selectData.url,\r\n        thumbnail_url: selectData.thumbnail,\r\n        lecture_date: selectData.lecture_date,\r\n        bootcamp_week: selectData.bootcamp_week,\r\n        cohort: selectData.cohort,\r\n        description: selectData.description,\r\n      });\r\n\r\n      //add tags\r\n      setTags(selectData.tags);\r\n\r\n      //add github links\r\n      if (selectData.github_links !== undefined) {\r\n        form.setFieldsValue({\r\n          github_links: selectData.github_links,\r\n        });\r\n      }\r\n\r\n      //add slide links\r\n      if (selectData.slides !== undefined) {\r\n        form.setFieldsValue({\r\n          slides: selectData.slides,\r\n        });\r\n      }\r\n\r\n      //add other links\r\n      if (selectData.other_links !== undefined) {\r\n        form.setFieldsValue({\r\n          other_links: selectData.other_links,\r\n        });\r\n      }\r\n    }\r\n    message.success(\"Video selected. Added to form data.\", 1);\r\n  };\r\n\r\n  //link formatter for form submission object\r\n  const setLinkType = (object, resource) =>\r\n    object ? object.map((obj) => Object.assign(obj, { type: resource })) : [];\r\n\r\n  //submit form function\r\n  const submitForm = (values) => {\r\n    const lectureData = {\r\n      ...values,\r\n      tags: tags,\r\n      date: String(values.lecture_date._d).split(\" \").slice(0, 4).join(\" \"),\r\n      timestamps: timestampData,\r\n      github_links: setLinkType(values.github_links, \"github\"),\r\n      slides: setLinkType(values.slides, \"presentation slide\"),\r\n      other_links: setLinkType(values.other_links, \"additional reading\"),\r\n    };\r\n\r\n    if (modeSelector) {\r\n      addLecture(lectureData);\r\n    } else {\r\n      const originVideo = pageOutput.filter(\r\n        (origin) => origin.id === values.id\r\n      );\r\n      console.log(originVideo);\r\n      updateLecture(lectureData);\r\n    }\r\n  };\r\n\r\n  const submitFailed = (value) => {\r\n    value.errorFields.map((value) =>\r\n      message.error(\r\n        `${\r\n          value.name[0].slice(0, 1).toUpperCase() + value.name[0].slice(1)\r\n        } field ${value.errors[0].toLowerCase()} `,\r\n        2.5\r\n      )\r\n    );\r\n  };\r\n\r\n  //form reset button function\r\n  const onReset = () => {\r\n    form.resetFields();\r\n    setTags([\"lecture\"]);\r\n    setEditTimestampData([\r\n      {\r\n        timeMoment: \"2021-01-14T00:00:00.000Z\",\r\n        timeSecondsValue: 0,\r\n        timeString: \"00:00:00\",\r\n        uuid: uuidv4(),\r\n        timeDesc: \"start\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  //POST\r\n  async function addLecture(resource) {\r\n    await fetch(config.BACKEND_URL_ADD_CONTENT, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(resource),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    await message.success(\"Form data submitted successfully\", 1.5, onReset());\r\n    setPageOutput(\r\n      pageOutput.filter((item) => item.link !== resource.video_url)\r\n    );\r\n  }\r\n\r\n  //DELETE\r\n  async function deleteLecture(value) {\r\n    await fetch(config.BACKEND_URL_DELETE_CONTENT + `${value}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    setPageOutput(pageOutput.filter((item) => item.id !== value));\r\n    message.success(\"Lecture deleted\", 1.5, onReset());\r\n  }\r\n\r\n  //PUT\r\n  async function updateLecture(value) {\r\n    await fetch(config.BACKEND_URL_UPDATE_CONTENT, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(value),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    setPageOutput([\r\n      ...pageOutput.filter((item) => item.id !== value.id),\r\n      value,\r\n    ]);\r\n    message.success(\"Lecture updated\", 1.5, onReset());\r\n  }\r\n\r\n  //show modal\r\n  const modalDisplay = () => {\r\n    const videoUrlInputValue = form.getFieldValue(\"video_url\");\r\n    setTimestampVideoUrl(videoUrlInputValue);\r\n    setTimestampsVisible(!timestampsVisible);\r\n  };\r\n\r\n  const modalHide = () => {\r\n    setTimestampsVisible(false);\r\n  };\r\n\r\n  const getTimeStampData = (obj) => {\r\n    setTimestampData(obj.timestamps);\r\n  };\r\n\r\n  const toggleTagDisplay = () => {\r\n    setTagEditorVisible(!tagEditorVisible);\r\n  };\r\n\r\n  const toggleLecturerDisplay = () => {\r\n    setLecturerEditorVisible(!lecturerEditorVisible);\r\n  };\r\n\r\n  const updateTagData = (value) => {\r\n    setTagData(value);\r\n  };\r\n\r\n  const updateLastTagData = (value) => {\r\n    setLastTagId(value);\r\n  };\r\n\r\n  const updateLecturerData = (value) => {\r\n    setLecturerData(value);\r\n  };\r\n\r\n  const updateLastLecturerId = (value) => {\r\n    setLastLecturerId(value);\r\n  };\r\n\r\n  const switchVideoMode = () => {\r\n    setModeSelector(!modeSelector);\r\n  };\r\n\r\n  const updateVideoSelectPageOutput = (value) => {\r\n    setPageOutput(value);\r\n  };\r\n\r\n  //start of rendering\r\n  return (\r\n    <>\r\n      <TimestampSelector\r\n        timestampsVisible={timestampsVisible}\r\n        modalDisplay={modalDisplay}\r\n        timestampVideoUrl={timestampVideoUrl}\r\n        ruleSetRequired={ruleSetRequired}\r\n        submitFailed={submitFailed}\r\n        modalHide={modalHide}\r\n        getTimeStampData={getTimeStampData}\r\n        modeSelector={modeSelector}\r\n        editTimestampData={editTimestampData}\r\n      />\r\n\r\n      <CmsTagEditor\r\n        tagData={tagData}\r\n        updateTagData={updateTagData}\r\n        tagEditorVisible={tagEditorVisible}\r\n        toggleTagDisplay={toggleTagDisplay}\r\n        lastTagId={lastTagId}\r\n        updateLastTagData={updateLastTagData}\r\n      />\r\n\r\n      <CmsLecturerEditor\r\n        lecturerData={lecturerData}\r\n        updateLecturerData={updateLecturerData}\r\n        lecturerEditorVisible={lecturerEditorVisible}\r\n        toggleLecturerDisplay={toggleLecturerDisplay}\r\n        lastLecturerId={lastLecturerId}\r\n        updateLastLecturerId={updateLastLecturerId}\r\n      />\r\n\r\n      <Row justify=\"end\">\r\n        <Space style={{ marginRight: \"32px\" }}>\r\n          <h1>Lecture Management</h1>\r\n        </Space>\r\n      </Row>\r\n\r\n      <Row style={{ marginBottom: \"32px\" }} justify=\"center\">\r\n        <Col span={22}>\r\n          <DrawerToolsMenu\r\n            toggleTagDisplay={toggleTagDisplay}\r\n            toggleLecturerDisplay={toggleLecturerDisplay}\r\n            updateVideoSelectPageOutput={updateVideoSelectPageOutput}\r\n            switchVideoMode={switchVideoMode}\r\n            modeSelector={modeSelector}\r\n          />\r\n          <Divider style={{ marginBottom: \"0\", marginTop: \"42px\" }} />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row justify={\"center\"}>\r\n        <Col span={14}>\r\n          <CmsVideoSelector\r\n            modeSelector={modeSelector}\r\n            setFormVideoData={setFormVideoData}\r\n            pageOutput={pageOutput}\r\n            updateVideoSelectPageOutput={updateVideoSelectPageOutput}\r\n            deleteLecture={deleteLecture}\r\n          />\r\n        </Col>\r\n\r\n        <Col span={8}>\r\n          <h3 style={{ marginBottom: \"1em\" }}>Form Data</h3>\r\n          <Form\r\n            style={{ padding: \"1em\" }}\r\n            {...formLayout}\r\n            name=\"cms\"\r\n            form={form}\r\n            initialValues={{\r\n              remember: false,\r\n            }}\r\n            onFinish={submitForm}\r\n            onFinishFailed={(value) => submitFailed(value)}\r\n          >\r\n            <Form.Item name=\"id\" hidden>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Video Title\" name=\"title\" rules={ruleSetRequired}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Guest Lecturer\"\r\n              // name=\"guest_lecture_switch\"\r\n              valuePropName=\"checked\"\r\n            >\r\n              <Switch\r\n                onChange={() => {\r\n                  setGuestLecturer(!guestLecturer);\r\n                }}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label={!guestLecturer ? \"Lecturer Name\" : \"Guest Lecturer Name\"}\r\n              name=\"lecturer\"\r\n              rules={ruleSetRequired}\r\n            >\r\n              {!guestLecturer ? (\r\n                <Select>\r\n                  {lecturerData ? (\r\n                    lecturerData.map((value) => (\r\n                      <Option key={value.lecturer}>{value.lecturer}</Option>\r\n                    ))\r\n                  ) : (\r\n                    <Option key={\"no data\"}>{\"no data\"}</Option>\r\n                  )}\r\n                </Select>\r\n              ) : (\r\n                <Input />\r\n              )}\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Video URL\"\r\n              name=\"video_url\"\r\n              rules={ruleSetRequired}\r\n            >\r\n              <Input onChange={(e) => setTimestampVideoUrl(e.target.value)} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Thumbnail URL\"\r\n              name=\"thumbnail_url\"\r\n              rules={ruleSetRequired}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              // name=\"tutorial_switch\"\r\n              label=\"Tutorial\"\r\n              valuePropName=\"checked\"\r\n            >\r\n              <Switch\r\n                onChange={() => {\r\n                  setTutorialVideo(!tutorialVideo);\r\n                }}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Tags\" rules={ruleSetRequired}>\r\n              <Select\r\n                mode=\"multiple\"\r\n                name=\"tags\"\r\n                value={tags}\r\n                placeholder=\"Select tags\"\r\n                onChange={(value) => {\r\n                  setTags(value);\r\n                }}\r\n              >\r\n                {tagData ? (\r\n                  tagData.map((value) => (\r\n                    <Option key={value.tag}>{value.tag}</Option>\r\n                  ))\r\n                ) : (\r\n                  <Option key={\"no data\"}>{\"no data\"}</Option>\r\n                )}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label={!guestLecturer ? \"Lecture Date\" : \"Guest Speaker Date\"}\r\n              name=\"lecture_date\"\r\n              rules={ruleSetRequired}\r\n            >\r\n              <DatePicker defaultPickerValue={moment()} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Bootcamp Week\"\r\n              name=\"bootcamp_week\"\r\n              rules={ruleSetRequired}\r\n            >\r\n              <InputNumber min={1} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Cohort\" name=\"cohort\" rules={ruleSetRequired}>\r\n              <InputNumber min={1} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Video Description\"\r\n              name=\"description\"\r\n              rules={ruleSetRequired}\r\n            >\r\n              <Input.TextArea autoSize={{ minRows: 8 }} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={\"Timestamps\"}>\r\n              <Button\r\n                onClick={() =>\r\n                  timestampVideoUrl &&\r\n                  timestampVideoUrl.slice(0, 18) === \"https://vimeo.com/\" &&\r\n                  typeof Number(timestampVideoUrl.slice(0, 18)) === \"number\"\r\n                    ? modalDisplay()\r\n                    : message.warn(\r\n                        \"Please select a video or update the video url field\"\r\n                      )\r\n                }\r\n              >\r\n                Open Timestamp Editor\r\n              </Button>\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Github Links\">\r\n              <Form.List name=\"github_links\">\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map((field) => (\r\n                      <Space\r\n                        key={field.key}\r\n                        style={{ display: \"flex\", marginBottom: 0 }}\r\n                        align=\"baseline\"\r\n                      >\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"link\"]}\r\n                          fieldKey={[field.fieldKey, \"link\"]}\r\n                        >\r\n                          <Input placeholder=\"url\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"desc\"]}\r\n                          fieldKey={[field.fieldKey, \"desc\"]}\r\n                        >\r\n                          <Input placeholder=\"description\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"uuid\"]}\r\n                          fieldKey={[field.fieldKey, \"uuid\"]}\r\n                          hidden\r\n                          initialValue={uuidv4()}\r\n                        ></Form.Item>\r\n\r\n                        <MinusCircleOutlined\r\n                          onClick={() => remove(field.name)}\r\n                        />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        onClick={() => add()}\r\n                        icon={<PlusOutlined />}\r\n                      >\r\n                        Add Github Link\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Slide Links\">\r\n              <Form.List name=\"slides\">\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map((field) => (\r\n                      <Space\r\n                        key={field.key}\r\n                        style={{ display: \"flex\", marginBottom: 0 }}\r\n                        align=\"baseline\"\r\n                      >\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"link\"]}\r\n                          fieldKey={[field.fieldKey, \"link\"]}\r\n                        >\r\n                          <Input placeholder=\"url\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"desc\"]}\r\n                          fieldKey={[field.fieldKey, \"desc\"]}\r\n                        >\r\n                          <Input placeholder=\"description\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"uuid\"]}\r\n                          fieldKey={[field.fieldKey, \"uuid\"]}\r\n                          hidden\r\n                          initialValue={uuidv4()}\r\n                        ></Form.Item>\r\n\r\n                        <MinusCircleOutlined\r\n                          onClick={() => remove(field.name)}\r\n                        />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        onClick={() => add()}\r\n                        icon={<PlusOutlined />}\r\n                      >\r\n                        Add Slide Link\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Other Links\">\r\n              <Form.List name=\"other_links\">\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map((field) => (\r\n                      <Space\r\n                        key={field.key}\r\n                        style={{ display: \"flex\", marginBottom: 0 }}\r\n                        align=\"baseline\"\r\n                      >\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"link\"]}\r\n                          fieldKey={[field.fieldKey, \"link\"]}\r\n                        >\r\n                          <Input placeholder=\"url\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"desc\"]}\r\n                          fieldKey={[field.fieldKey, \"desc\"]}\r\n                        >\r\n                          <Input placeholder=\"description\" />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"uuid\"]}\r\n                          fieldKey={[field.fieldKey, \"uuid\"]}\r\n                          hidden\r\n                          initialValue={uuidv4()}\r\n                        ></Form.Item>\r\n\r\n                        <MinusCircleOutlined\r\n                          onClick={() => remove(field.name)}\r\n                        />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        onClick={() => add()}\r\n                        icon={<PlusOutlined />}\r\n                      >\r\n                        Add Other Link\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                {modeSelector ? \"Submit New Lecture\" : \"Submit Changes\"}\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CoachCMS;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\config.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSLectureEditor\\index.js",["130","131"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Table,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Space,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport config from \"../../config\";\r\nimport {\r\n  CloseCircleOutlined,\r\n  EditOutlined,\r\n  SaveOutlined,\r\n  StopOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst CmsLecturerEditor = ({\r\n  lecturerEditorVisible,\r\n  toggleLecturerDisplay,\r\n  lecturerData,\r\n  updateLecturerData,\r\n  lastLecturerId,\r\n  updateLastLecturerId,\r\n}) => {\r\n  const [lecturerDelete, setLecturerDelete] = useState(null);\r\n  const [lecturerAdd, setLecturerAdd] = useState(null);\r\n  const [form] = Form.useForm();\r\n  const [inputDisabled, setInputDisabled] = useState(true);\r\n  const [lecturerInput, setLecturerInput] = useState(null);\r\n  const [lecturerUpdate, setLecturerUpdate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const deleteLecturer = async () => {\r\n      await fetch(\r\n        config.BACKEND_URL_LECTURERS_DELETE + `${lecturerDelete.key}`,\r\n        {\r\n          method: \"DELETE\",\r\n        }\r\n      );\r\n      updateLecturerData(\r\n        lecturerData.filter((lecturer) => lecturer.key !== lecturerDelete.key)\r\n      );\r\n      message.success(`'${lecturerDelete.lecturer}' has been deleted`);\r\n      setLecturerDelete(null);\r\n    };\r\n    if (lecturerDelete) {\r\n      deleteLecturer();\r\n    }\r\n  }, [lecturerDelete]);\r\n\r\n  useEffect(() => {\r\n    const addLecturer = async () => {\r\n      await fetch(config.BACKEND_URL_LECTURERS_ADD, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ lecturer: lecturerAdd }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      updateLecturerData([\r\n        ...lecturerData,\r\n        { key: lastLecturerId, lecturer: lecturerAdd },\r\n      ]);\r\n      message.success(`'${lecturerAdd}' has been added`);\r\n      setLecturerAdd(null);\r\n    };\r\n    if (lecturerAdd) {\r\n      addLecturer();\r\n    }\r\n  }, [lecturerAdd]);\r\n\r\n  useEffect(() => {\r\n    const updateLecturer = async () => {\r\n      await fetch(config.BACKEND_URL_LECTURERS_UPDATE, {\r\n        method: \"PATCH\",\r\n        body: JSON.stringify(lecturerUpdate),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n    };\r\n    if (lecturerUpdate) {\r\n      updateLecturer();\r\n      message.success(`Lecturer updated`);\r\n      setLecturerUpdate(null);\r\n    }\r\n  }, [lecturerUpdate]);\r\n\r\n  const { Column } = Table;\r\n\r\n  const submitLecturer = (submittedLecturer) => {\r\n    let lecturerCheck = null;\r\n\r\n    if (lecturerData) {\r\n      lecturerCheck = lecturerData.some(\r\n        (value) =>\r\n          value.lecturer.toLowerCase() === submittedLecturer.name.toLowerCase()\r\n      );\r\n      if (lecturerCheck) {\r\n        message.error(`Lecturer already exists`);\r\n        form.resetFields();\r\n      } else {\r\n        updateLastLecturerId(lastLecturerId + 1);\r\n        setLecturerAdd(submittedLecturer.name);\r\n        form.resetFields();\r\n      }\r\n    } else {\r\n      updateLastLecturerId(lastLecturerId + 1);\r\n      setLecturerAdd(submittedLecturer.name);\r\n      form.resetFields();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={lecturerEditorVisible}\r\n      onCancel={() => {\r\n        toggleLecturerDisplay();\r\n        setInputDisabled(!inputDisabled);\r\n      }}\r\n      footer={null}\r\n      closable\r\n      destroyOnClose\r\n    >\r\n      <h3>Lecturer Editor</h3>\r\n      <Form name=\"lecturerform\" onFinish={submitLecturer} form={form}>\r\n        <Space>\r\n          <Form.Item\r\n            label=\"Lecturer Name\"\r\n            name=\"name\"\r\n            rules={[{ required: true }]}\r\n          >\r\n            <Space>\r\n              <Input\r\n                placeholder=\"Enter lecturer name\"\r\n                style={{ width: \"200px\" }}\r\n                disabled={inputDisabled}\r\n              />\r\n              <Button type=\"primary\" htmlType=\"submit\" disabled={inputDisabled}>\r\n                Submit\r\n              </Button>\r\n            </Space>\r\n          </Form.Item>\r\n        </Space>\r\n      </Form>\r\n\r\n      <Table\r\n        dataSource={lecturerData}\r\n        size=\"small\"\r\n        pagination={{ pageSize: 50 }}\r\n        scroll={{ y: 500 }}\r\n      >\r\n        <Column title=\"ID\" dataIndex=\"key\" key=\"key\" />\r\n        <Column\r\n          title=\"Lecturer\"\r\n          key=\"lecturer\"\r\n          render={(record) => (\r\n            <Input\r\n              defaultValue={record.lecturer}\r\n              bordered={false}\r\n              disabled={inputDisabled}\r\n              onChange={(e) =>\r\n                setLecturerInput({\r\n                  updateRecord: record.key,\r\n                  updateValue: e.target.value,\r\n                })\r\n              }\r\n            />\r\n          )}\r\n        />\r\n\r\n        <Column\r\n          title=\"Delete\"\r\n          key=\"delete\"\r\n          render={(record) => (\r\n            <Popconfirm\r\n              title={`Are you sure you want to delete '${record.lecturer}'`}\r\n              okText={`delete`}\r\n              cancelText={`cancel`}\r\n              onConfirm={() => setLecturerDelete(record)}\r\n              disabled={inputDisabled}\r\n            >\r\n              {inputDisabled ? (\r\n                <StopOutlined style={{ color: \"#ccc\" }} />\r\n              ) : (\r\n                <CloseCircleOutlined style={{ color: \"red\" }} />\r\n              )}\r\n            </Popconfirm>\r\n          )}\r\n        />\r\n      </Table>\r\n      {inputDisabled ? (\r\n        <p style={{ color: \"green\" }}>Viewing Mode</p>\r\n      ) : (\r\n        <p style={{ color: \"red\" }}>Editing Mode</p>\r\n      )}\r\n      <Space>\r\n        <Button\r\n          onClick={() => {\r\n            setInputDisabled(!inputDisabled);\r\n          }}\r\n        >\r\n          Edit <EditOutlined />\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            setLecturerUpdate(lecturerInput);\r\n            setLecturerInput(null);\r\n          }}\r\n          disabled={\r\n            (inputDisabled && !lecturerInput) || !lecturerInput ? true : false\r\n          }\r\n        >\r\n          Save <SaveOutlined />\r\n        </Button>\r\n      </Space>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CmsLecturerEditor;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDropdown\\index.js",[],["132","133"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSTagEditor\\index.js",["134","135"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Table,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Space,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport config from \"../../config\";\r\nimport {\r\n  CloseCircleOutlined,\r\n  EditOutlined,\r\n  SaveOutlined,\r\n  StopOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst CmsTagEditor = ({\r\n  tagEditorVisible,\r\n  toggleTagDisplay,\r\n  tagData,\r\n  updateTagData,\r\n  lastTagId,\r\n  updateLastTagData,\r\n}) => {\r\n  const [tagDelete, setTagDelete] = useState(null);\r\n  const [tagAdd, setTagAdd] = useState(null);\r\n  const [form] = Form.useForm();\r\n  const [inputDisabled, setInputDisabled] = useState(true);\r\n  const [tagInput, setTagInput] = useState(null);\r\n  const [tagUpdate, setTagUpdate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const deleteTag = async () => {\r\n      await fetch(config.BACKEND_URL_TAGS_DELETE + `${tagDelete.key}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      updateTagData(tagData.filter((tag) => tag.key !== tagDelete.key));\r\n      message.success(`'${tagDelete.tag}' tag has been deleted`);\r\n      setTagDelete(null);\r\n    };\r\n    if (tagDelete) {\r\n      deleteTag();\r\n    }\r\n  }, [tagDelete]);\r\n\r\n  useEffect(() => {\r\n    const addTag = async () => {\r\n      await fetch(config.BACKEND_URL_TAGS_ADD, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ tag: tagAdd }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      updateTagData([...tagData, { key: lastTagId, tag: tagAdd }]);\r\n      message.success(`'${tagAdd}' tag has been added`);\r\n      setTagAdd(null);\r\n    };\r\n    if (tagAdd) {\r\n      addTag();\r\n    }\r\n  }, [tagAdd]);\r\n\r\n  useEffect(() => {\r\n    const updateTag = async () => {\r\n      await fetch(config.BACKEND_URL_TAGS_UPDATE, {\r\n        method: \"PATCH\",\r\n        body: JSON.stringify(tagUpdate),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n    };\r\n    if (tagUpdate) {\r\n      updateTag();\r\n      message.success(`Tag updated`);\r\n      setTagUpdate(null);\r\n    }\r\n  }, [tagUpdate]);\r\n\r\n  const { Column } = Table;\r\n\r\n  const submitTag = (submittedTag) => {\r\n    let tagCheck = null;\r\n\r\n    if (tagData) {\r\n      tagCheck = tagData.some(\r\n        (value) => value.tag.toLowerCase() === submittedTag.name.toLowerCase()\r\n      );\r\n      if (tagCheck) {\r\n        message.error(`Tag already exists`);\r\n        form.resetFields();\r\n      } else {\r\n        updateLastTagData(lastTagId + 1);\r\n        setTagAdd(submittedTag.name);\r\n        form.resetFields();\r\n      }\r\n    } else {\r\n      updateLastTagData(lastTagId + 1);\r\n      setTagAdd(submittedTag.name);\r\n      form.resetFields();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={tagEditorVisible}\r\n      onCancel={() => {\r\n        toggleTagDisplay();\r\n        setInputDisabled(!inputDisabled);\r\n      }}\r\n      footer={null}\r\n      closable\r\n      destroyOnClose\r\n    >\r\n      <h3>Tag Editor</h3>\r\n      <Form name=\"tagform\" onFinish={submitTag} form={form}>\r\n        <Space>\r\n          <Form.Item label=\"Tag Name\" name=\"name\" rules={[{ required: true }]}>\r\n            <Space>\r\n              <Input\r\n                placeholder=\"Enter tag name\"\r\n                style={{ width: \"200px\" }}\r\n                disabled={inputDisabled}\r\n              />\r\n              <Button type=\"primary\" htmlType=\"submit\" disabled={inputDisabled}>\r\n                Submit\r\n              </Button>\r\n            </Space>\r\n          </Form.Item>\r\n        </Space>\r\n      </Form>\r\n\r\n      <Table\r\n        dataSource={tagData}\r\n        size=\"small\"\r\n        pagination={{ pageSize: 50 }}\r\n        scroll={{ y: 500 }}\r\n      >\r\n        <Column title=\"ID\" dataIndex=\"key\" key=\"key\" />\r\n        <Column\r\n          title=\"Tag\"\r\n          key=\"tag\"\r\n          render={(record) => (\r\n            <Input\r\n              defaultValue={record.tag}\r\n              bordered={false}\r\n              disabled={inputDisabled}\r\n              onChange={(e) =>\r\n                setTagInput({\r\n                  updateRecord: record.key,\r\n                  updateValue: e.target.value,\r\n                })\r\n              }\r\n            />\r\n          )}\r\n        />\r\n\r\n        <Column\r\n          title=\"Delete\"\r\n          key=\"delete\"\r\n          render={(record) => (\r\n            <Popconfirm\r\n              title={`Are you sure you want to delete '${record.tag}'`}\r\n              okText={`delete`}\r\n              cancelText={`cancel`}\r\n              onConfirm={() => setTagDelete(record)}\r\n              disabled={inputDisabled}\r\n            >\r\n              {inputDisabled ? (\r\n                <StopOutlined style={{ color: \"#ccc\" }} />\r\n              ) : (\r\n                <CloseCircleOutlined style={{ color: \"red\" }} />\r\n              )}\r\n            </Popconfirm>\r\n          )}\r\n        />\r\n      </Table>\r\n      {inputDisabled ? (\r\n        <p style={{ color: \"green\" }}>Viewing Mode</p>\r\n      ) : (\r\n        <p style={{ color: \"red\" }}>Editing Mode</p>\r\n      )}\r\n      <Space>\r\n        <Button\r\n          onClick={() => {\r\n            setInputDisabled(!inputDisabled);\r\n          }}\r\n        >\r\n          Edit <EditOutlined />\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={() => {\r\n            setTagUpdate(tagInput);\r\n            setTagInput(null);\r\n          }}\r\n          disabled={(inputDisabled && !tagInput) || !tagInput ? true : false}\r\n        >\r\n          Save <SaveOutlined />\r\n        </Button>\r\n      </Space>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CmsTagEditor;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSTimestampSelector\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSVideoSelector\\index.js",["136","137"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FilterBox\\index.js",["138"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDescription\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSMenu\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Footer\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackViewer\\index.js",["139","140"],"import React, { useState, useEffect } from \"react\";\r\nimport config from \"../../config\";\r\nimport \"./style.css\";\r\nimport moment from \"moment\";\r\nimport { Comment, Divider } from \"antd\";\r\n\r\nexport default function FeedbackViewer() {\r\n  let url = window.location.href; //gets the whole url\r\n  let split = url.split(\"/\"); //splits the url into an array by /\r\n  let ref = split[split.length - 1]; //Collects the last part of the array, which in this case will be the video id that is displaying on this page\r\n\r\n  const [feedbackArr, setFeedbackArr] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getFeedback() {\r\n      const response = await fetch(config.BACKEND_URL_FEEDBACK_UPDATE + ref);\r\n      const data = await response.json();\r\n      setFeedbackArr(data.payload);\r\n    }\r\n    getFeedback();\r\n  }, []);\r\n\r\n  if (feedbackArr.length > 0) {\r\n    return (\r\n      <div className=\"feedback-viewer-column\">\r\n        {feedbackArr.map((item) => {\r\n          return (\r\n            <Comment\r\n              author={moment(item.created_at).format(\"DD MM yy hh:mma\")}\r\n              content={item.feedback}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <></>;\r\n  }\r\n}\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDrawerMenu\\index.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":55,"column":6,"nodeType":"147","endLine":55,"endColumn":58,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"149","line":43,"column":6,"nodeType":"147","endLine":43,"endColumn":14,"suggestions":"150"},{"ruleId":"145","severity":1,"message":"151","line":127,"column":6,"nodeType":"147","endLine":127,"endColumn":21,"suggestions":"152"},{"ruleId":"145","severity":1,"message":"151","line":137,"column":6,"nodeType":"147","endLine":137,"endColumn":21,"suggestions":"153"},{"ruleId":"145","severity":1,"message":"154","line":52,"column":6,"nodeType":"147","endLine":52,"endColumn":22,"suggestions":"155"},{"ruleId":"145","severity":1,"message":"156","line":74,"column":6,"nodeType":"147","endLine":74,"endColumn":19,"suggestions":"157"},{"ruleId":"141","replacedBy":"158"},{"ruleId":"143","replacedBy":"159"},{"ruleId":"145","severity":1,"message":"160","line":47,"column":6,"nodeType":"147","endLine":47,"endColumn":17,"suggestions":"161"},{"ruleId":"145","severity":1,"message":"162","line":66,"column":6,"nodeType":"147","endLine":66,"endColumn":14,"suggestions":"163"},{"ruleId":"145","severity":1,"message":"164","line":65,"column":6,"nodeType":"147","endLine":65,"endColumn":28,"suggestions":"165"},{"ruleId":"145","severity":1,"message":"164","line":78,"column":6,"nodeType":"147","endLine":78,"endColumn":28,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":4,"column":49,"nodeType":"169","messageId":"170","endLine":4,"endColumn":52},{"ruleId":"167","severity":1,"message":"171","line":5,"column":19,"nodeType":"169","messageId":"170","endLine":5,"endColumn":26},{"ruleId":"145","severity":1,"message":"172","line":21,"column":6,"nodeType":"147","endLine":21,"endColumn":8,"suggestions":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'paginationSize' and 'tagState.selectedTags.length'. Either include them or remove the dependency array.","ArrayExpression",["176"],"React Hook useEffect has a missing dependency: 'searchUrl'. Either include it or remove the dependency array.",["177"],"React Hook useEffect has a missing dependency: 'tags'. Either include it or remove the dependency array.",["178"],["179"],"React Hook useEffect has missing dependencies: 'lecturerData' and 'updateLecturerData'. Either include them or remove the dependency array. If 'updateLecturerData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["180"],"React Hook useEffect has missing dependencies: 'lastLecturerId', 'lecturerData', and 'updateLecturerData'. Either include them or remove the dependency array. If 'updateLecturerData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["181"],["174"],["175"],"React Hook useEffect has missing dependencies: 'tagData' and 'updateTagData'. Either include them or remove the dependency array. If 'updateTagData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["182"],"React Hook useEffect has missing dependencies: 'lastTagId', 'tagData', and 'updateTagData'. Either include them or remove the dependency array. If 'updateTagData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["183"],"React Hook useEffect has a missing dependency: 'updateVideoSelectPageOutput'. Either include it or remove the dependency array. If 'updateVideoSelectPageOutput' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["184"],["185"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","React Hook useEffect has a missing dependency: 'ref'. Either include it or remove the dependency array.",["186"],"no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"203","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [searchText, searchTags, searchWeek, searchLecturer, tagState.selectedTags.length, paginationSize]",{"range":"208","text":"209"},"Update the dependencies array to be: [paging, searchUrl]",{"range":"210","text":"211"},"Update the dependencies array to be: [guestLecturer, tags]",{"range":"212","text":"213"},"Update the dependencies array to be: [tags, tutorialVideo]",{"range":"214","text":"215"},"Update the dependencies array to be: [lecturerData, lecturerDelete, updateLecturerData]",{"range":"216","text":"217"},"Update the dependencies array to be: [lastLecturerId, lecturerAdd, lecturerData, updateLecturerData]",{"range":"218","text":"219"},"Update the dependencies array to be: [tagData, tagDelete, updateTagData]",{"range":"220","text":"221"},"Update the dependencies array to be: [lastTagId, tagAdd, tagData, updateTagData]",{"range":"222","text":"223"},"Update the dependencies array to be: [modeSelector, paging, updateVideoSelectPageOutput]",{"range":"224","text":"225"},{"range":"226","text":"225"},"Update the dependencies array to be: [ref]",{"range":"227","text":"228"},[1652,1704],"[searchText, searchTags, searchWeek, searchLecturer, tagState.selectedTags.length, paginationSize]",[1541,1549],"[paging, searchUrl]",[4127,4142],"[guestLecturer, tags]",[4457,4472],"[tags, tutorialVideo]",[1344,1360],"[lecturerData, lecturerDelete, updateLecturerData]",[1932,1945],"[lastLecturerId, lecturerAdd, lecturerData, updateLecturerData]",[1161,1172],"[tagData, tagDelete, updateTagData]",[1655,1663],"[lastTagId, tagAdd, tagData, updateTagData]",[1706,1728],"[modeSelector, paging, updateVideoSelectPageOutput]",[2055,2077],[809,811],"[ref]"]