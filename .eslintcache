[{"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/index.js":"1","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/reportWebVitals.js":"2","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/firebase/Auth.js":"3","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/contexts/adminUsersContext.js":"4","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/App/App.js":"5","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/firebase/Base.js":"6","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/data/adminusers.js":"7","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/LectureViewer/index.js":"8","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/Login/index.js":"9","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/PrivateRoute/index.js":"10","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/Restricted/index.js":"11","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/VideoSelectionPage/index.js":"12","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/CoachCMS/index.js":"13","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/HeaderBar/index.js":"14","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/data/tutors.js":"15","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/data/tags.js":"16","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/ContentManagementLink/index.js":"17","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/FeedbackForm/index.js":"18"},{"size":773,"mtime":1609860157672,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1608567028481,"results":"21","hashOfConfig":"20"},{"size":615,"mtime":1609860157657,"results":"22","hashOfConfig":"20"},{"size":476,"mtime":1609860157656,"results":"23","hashOfConfig":"20"},{"size":2517,"mtime":1609942891560,"results":"24","hashOfConfig":"20"},{"size":462,"mtime":1609860157658,"results":"25","hashOfConfig":"20"},{"size":154,"mtime":1609860157657,"results":"26","hashOfConfig":"20"},{"size":2619,"mtime":1609860157654,"results":"27","hashOfConfig":"20"},{"size":1997,"mtime":1609860157655,"results":"28","hashOfConfig":"20"},{"size":491,"mtime":1609860157655,"results":"29","hashOfConfig":"20"},{"size":163,"mtime":1609860157655,"results":"30","hashOfConfig":"20"},{"size":1510,"mtime":1609942869399,"results":"31","hashOfConfig":"20"},{"size":11837,"mtime":1609928112329,"results":"32","hashOfConfig":"20"},{"size":2138,"mtime":1609936471392,"results":"33","hashOfConfig":"20"},{"size":317,"mtime":1609860157657,"results":"34","hashOfConfig":"20"},{"size":343,"mtime":1609928112334,"results":"35","hashOfConfig":"20"},{"size":160,"mtime":1609860157652,"results":"36","hashOfConfig":"20"},{"size":3594,"mtime":1609928112331,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1cy6kr1",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/index.js",[],["79","80"],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/reportWebVitals.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/firebase/Auth.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/contexts/adminUsersContext.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/App/App.js",["81","82","83"],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/firebase/Base.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/data/adminusers.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/LectureViewer/index.js",["84"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport ReactPlayer from \"react-player\";\nimport \"./style.css\";\nimport FeedbackForm from \"../FeedbackForm\";\nimport { Tabs, Spin } from \"antd\";\n\nconst { TabPane } = Tabs;\n\nexport default function LectureViewer({ allVideoData }) {\n  const id = useLocation().pathname.split(\"/\").pop();\n  const player = useRef(null);\n  const [videoData, setVideoData] = useState(null);\n\n  useEffect(() => {\n    if (videoData === null) {\n      const data = allVideoData.filter((obj) => obj.id === Number(id));\n      setVideoData(data[0]);\n    }\n  }, [videoData]);\n  console.log(videoData);\n  function seekToTimestamp(seconds) {\n    return player.current.seekTo(seconds);\n  }\n\n  if (!videoData) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      <h1>\n        {videoData.title} - {videoData.lecturer}\n      </h1>\n      <p>\n        <strong>video id:</strong> {videoData.id}\n      </p>\n      <div id=\"display\">\n        <ReactPlayer ref={player} url={videoData.video_url} controls={true} />\n        <div id=\"video-sidebar\">\n          <div id=\"video-timestamps\">\n            <h3>Timestamps</h3>\n            {videoData.timestamps.map((value) => {\n              return (\n                <div>\n                  <button\n                    onClick={() => seekToTimestamp(value.timeSecondsValue)}\n                  >\n                    {`${value.timeString} - ${value.timeDesc}`}\n                  </button>\n                  <br />\n                </div>\n              );\n            })}\n          </div>\n\n          <Tabs size=\"small\" style={{ width: \"500px\" }} defaultActiveKey=\"1\">\n            <TabPane tab=\"Video Description\" key=\"1\">\n              <p>{videoData.description}</p>\n            </TabPane>\n            <TabPane tab=\"Resources\" key=\"2\">\n              Here are some resource links <br />\n              <a\n                href={videoData.github_links}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Github\n              </a>\n              <br />\n              <a\n                href={videoData.slides}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Slides\n              </a>\n              <br />\n              <a\n                href={videoData.other_links}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Additional Reading\n              </a>\n            </TabPane>\n          </Tabs>\n        </div>\n      </div>\n      <FeedbackForm />\n    </>\n  );\n}\n","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/Login/index.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/PrivateRoute/index.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/Restricted/index.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/VideoSelectionPage/index.js",["85","86"],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/CoachCMS/index.js",["87","88"],"import React, { useEffect, useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport {\n  Form,\n  Input,\n  Button,\n  DatePicker,\n  InputNumber,\n  Space,\n  Select,\n  TimePicker,\n  Spin,\n} from \"antd\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport selectTags from \"../../data/tags\"; //new datasource, see data folder /******** API + DB TABLE REQUIRED ********/\nimport tutors from \"../../data/tutors\"; //new datasource, see data folder /******** API + DB TABLE REQUIRED ********/\n\nconst { Option } = Select;\n\n//global required field rules object, default false\nconst ruleSetRequired = [\n  {\n    required: true,\n    message: \"Input required\",\n  },\n];\n\n//simple layout configuation objects\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 8,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 8,\n  },\n};\n\n//start of component function\nfunction CoachCMS() {\n  const [tags, setTags] = useState([]); //used for tags field\n  const [vimeoVideoSelect, setVimeoVideoSelect] = useState([]); //used for API call to vimeo for video selector\n\n  //direct form control via usefor - do not use setState\n  const [form] = Form.useForm();\n\n  //time converstion function for form submit object, returns total seconds for each instance\n  function timeCovertToSeconds(timeString) {\n    const timeSplit = String(timeString).split(\" \")[4].split(\":\");\n    const hoursToSeconds = Number(timeSplit[0]) * 60 * 60;\n    const minutesToSeconds = Number(timeSplit[1]) * 60;\n    const timeInSeconds =\n      hoursToSeconds + minutesToSeconds + Number(timeSplit[2]);\n    return timeInSeconds;\n  }\n\n  function convertArrayToString(array) {\n    return array.map((value) => JSON.stringify(value).split('\"')[3]);\n  }\n\n  //submit form function\n  const submitForm = (values) => {\n    const timestamps = [];\n    values.timestamps.map((timeObj) => {\n      timestamps.push({\n        timeString: String(timeObj.timestampSelect._d).split(\" \")[4],\n        timeSecondsValue: timeCovertToSeconds(timeObj.timestampSelect._d),\n        timeDesc: timeObj.timestampDesc,\n      });\n    });\n\n    postResource({\n      ...values,\n      tags: tags,\n      date: String(values.lecture_date._d).split(\" \").slice(0, 4).join(\" \"),\n      timestamps: timestamps,\n      other_links: convertArrayToString(values.other_links),\n      slides: convertArrayToString(values.slides),\n      github_links: convertArrayToString(values.git_links),\n    });\n    onReset();\n  };\n\n  //form reset button function\n  const onReset = () => {\n    form.resetFields();\n    form.setFieldsValue({\n      vimeoAPI: \"\",\n    });\n    setTags([]);\n  };\n\n  //Post request async function\n  async function postResource(resource) {\n    const api = \"/\";\n    await fetch(process.env.REACT_APP_BACKEND_URL + api, {\n      method: \"POST\",\n      body: JSON.stringify(resource),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n\n  //api call to vimeo for video selection, also creates and populates select component input\n  useEffect(() => {\n    async function getVimeoVideoList() {\n      const response = await fetch(`https://api.vimeo.com/me/videos`, {\n        method: \"GET\",\n        headers: {\n          Authorization: \"bearer \" + process.env.REACT_APP_VIMEO_TOKEN,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/vnd.vimeo.*+json;version=3.4\",\n        },\n      });\n      const data = await response.json();\n\n      setVimeoVideoSelect(\n        <Select\n          style={{ width: 250 }}\n          onChange={(value) => {\n            form.setFieldsValue({\n              title: value[0],\n              video_url: value[1],\n              thumbnail_url: value[2],\n            });\n          }}\n        >\n          {data.data.map((video) => (\n            <Option\n              key={video.link}\n              value={[\n                video.name,\n                video.link,\n                video.pictures.sizes[5].link,\n                video.created_time,\n              ]}\n            >\n              {`${video.name} - ${video.created_time\n                .split(\"T\")[0]\n                .split(\"-\")\n                .reverse()\n                .join(\"-\")}`}\n            </Option>\n          ))}\n        </Select>\n      );\n    }\n    getVimeoVideoList();\n  }, []);\n\n  //start of rendering\n  return (\n    <>\n      <h1>Coach CMS Form</h1>\n\n      <Form\n        {...layout}\n        name=\"cms\"\n        form={form}\n        initialValues={{\n          remember: false,\n        }}\n        onFinish={submitForm}\n      >\n        <Form.Item label=\"Vimeo API Video Select\">\n          {!!vimeoVideoSelect ? vimeoVideoSelect : <Spin />}\n        </Form.Item>\n        <Form.Item label=\"Video Title\" name=\"title\" rules={ruleSetRequired}>\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"Lecturer / Speaker Name\"\n          name=\"lecturer\"\n          rules={ruleSetRequired}\n        >\n          <Select allowClear>{tutors.map((tutor) => tutor)}</Select>\n        </Form.Item>\n        <Form.Item label=\"Video URL\" name=\"video_url\" rules={ruleSetRequired}>\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"Thumbnail URL\"\n          name=\"thumbnail_url\"\n          rules={ruleSetRequired}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"Tags\" rules={ruleSetRequired}>\n          <Select\n            name=\"tags\"\n            mode=\"multiple\"\n            value={tags}\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Select tags\"\n            onChange={(value) => {\n              setTags(value);\n            }}\n          >\n            {selectTags}\n          </Select>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Lecture Date\"\n          name=\"lecture_date\"\n          rules={ruleSetRequired}\n        >\n          <DatePicker />\n        </Form.Item>\n        <Form.Item\n          label=\"Bootcamp Week\"\n          name=\"bootcamp_week\"\n          rules={ruleSetRequired}\n        >\n          <InputNumber min={1} />\n        </Form.Item>\n        <Form.Item\n          label=\"Video Description\"\n          name=\"description\"\n          rules={ruleSetRequired}\n        >\n          <Input.TextArea autoSize={{ minRows: 8 }} />\n        </Form.Item>\n\n        <Form.Item label=\"Timestamps\" required>\n          <Form.List name=\"timestamps\" rules={ruleSetRequired}>\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map((field) => (\n                  <Space\n                    key={field.key}\n                    style={{ display: \"flex\", marginBottom: 0 }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      {...field}\n                      name={[field.name, \"timestampSelect\"]}\n                      fieldKey={[field.fieldKey, \"timestampSelect\"]}\n                      rules={ruleSetRequired}\n                    >\n                      <TimePicker />\n                    </Form.Item>\n\n                    <Form.Item\n                      {...field}\n                      name={[field.name, \"timestampDesc\"]}\n                      label=\"Description\"\n                      style={{ width: \"350px\" }}\n                      fieldKey={[field.fieldKey, \"timestampDesc\"]}\n                      rules={ruleSetRequired}\n                    >\n                      <Input />\n                    </Form.Item>\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\n                  </Space>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add Timestamp\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n        </Form.Item>\n\n        <Form.Item label=\"Github Links\">\n          <Form.List name=\"git_links\">\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map((field) => (\n                  <Space\n                    key={field.key}\n                    style={{ display: \"flex\", marginBottom: 0 }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      {...field}\n                      name={[field.name, \"gitlink\"]}\n                      style={{ width: \"300px\" }}\n                      fieldKey={[field.fieldKey, \"gitlink\"]}\n                    >\n                      <Input placeholder=\"url\" />\n                    </Form.Item>\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\n                  </Space>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add Github Link\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n        </Form.Item>\n\n        <Form.Item label=\"Slide Links\">\n          <Form.List name=\"slides\">\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map((field) => (\n                  <Space\n                    key={field.key}\n                    style={{ display: \"flex\", marginBottom: 0 }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      {...field}\n                      name={[field.name, \"slidelink\"]}\n                      style={{ width: \"300px\" }}\n                      fieldKey={[field.fieldKey, \"slidelink\"]}\n                    >\n                      <Input placeholder=\"url\" />\n                    </Form.Item>\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\n                  </Space>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add Slide Link\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n        </Form.Item>\n\n        <Form.Item label=\"Other Links\">\n          <Form.List name=\"other_links\">\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map((field) => (\n                  <Space\n                    key={field.key}\n                    style={{ display: \"flex\", marginBottom: 0 }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      {...field}\n                      name={[field.name, \"otherlink\"]}\n                      style={{ width: \"300px\" }}\n                      fieldKey={[field.fieldKey, \"otherlink\"]}\n                    >\n                      <Input placeholder=\"url\" />\n                    </Form.Item>\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\n                  </Space>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add Other Link\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n          <Button htmlType=\"button\" onClick={onReset}>\n            Reset\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n\nexport default CoachCMS;\n","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/HeaderBar/index.js",["89","90"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\nimport socLogo from \"../../images/soc-logo.png\";\nimport app from \"../../firebase/Base\";\nimport { AuthContext } from \"../../firebase/Auth\";\nimport ContentManagementLink from \"../ContentManagementLink\";\nimport { AdminUsersContext } from \"../../contexts/adminUsersContext\";\nimport { Button, Input } from \"antd\";\n\n// const { Header } = Layout;\nconst { Search } = Input;\n\nfunction HeaderBar({ updateSearch, searchState }) {\n  const { currentUser } = useContext(AuthContext);\n  const adminUsers = useContext(AdminUsersContext);\n  // const [searchField, setSearchField] = useState(\"\");\n\n  const onSearch = (value) => updateSearch(value);\n  // const onChange = (e) => setSearchField(e.target.value);\n  // useEffect(() => {\n  //   //updateSearch(searchField);\n  // }, [searchField]);\n\n  return (\n    <header>\n      <div id=\"header-content\">\n        <div id=\"logo-nav-wrapper\">\n          <Link to=\"/\">\n            <img src={socLogo} alt=\"logo\" id=\"soc-logo\" />\n          </Link>\n          <nav>\n            <ul>\n              <li>Tutorials</li>\n              <li>Lectures</li>\n              {adminUsers[0].find(\n                (user) => user.email === currentUser.email\n              ) ? (\n                <ContentManagementLink />\n              ) : (\n                <li style={{ display: \"none\" }}></li>\n              )}\n            </ul>\n          </nav>\n        </div>\n        <div id=\"search-signout-wrapper\">\n          <div id=\"search-box\">\n            <Search\n              allowClear={true}\n              placeholder=\"input search text\"\n              // onChange={onChange}\n              onSearch={onSearch}\n              style={{ width: 200 }}\n            />\n          </div>\n          <Button\n            onClick={() => app.auth().signOut()}\n            style={{\n              background: \"#31986A\",\n              borderRadius: \"10px\",\n              height: \"50px\",\n            }}\n          >\n            Sign Out\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default HeaderBar;\n","/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/data/tutors.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/data/tags.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/ContentManagementLink/index.js",[],"/Users/aftabhussain/school_of_code/final_project/front-end-final-project-code-goblins/src/components/FeedbackForm/index.js",["91"],"import React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./style.css\";\nimport { Modal, Button, Input } from \"antd\";\nimport { message, Space } from \"antd\";\n\nconst { TextArea } = Input;\n\n//Feedback success messages. Edit these to display different messages depending the success of the feedback form submit.\n\nfunction successMsg() { //Displays on feedback success\n  message.success(\"Thanks for your feedback!\");\n}\n\nfunction errorMsg() {//Displays on feedback error\n  message.error(\"An error occured. Please try again.\");\n}\n\n//Gets the video id from the url\nlet url = window.location.href; //gets the whole url\nlet split = url.split(\"/\"); //splits the url into an array by /\nlet ref = split[split.length - 1]; //Collects the last part of the array, which in this case will be the video id that is displaying on this page\n\n//Sets whether or not the modal is visable\nexport default function FeedbackModal() {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [feedback, setFeedback] = useState(\"\");\n\n  //Posts the feedback to the database\n  function postFeedback(value) {//Value is the feedback to be submitted\n    fetch(`http://localhost:5000/feedback`, { //Change this url on deployment\n      method: \"post\",\n      body: JSON.stringify({\n        videoId: value.videoId, //Taken from ref - see feedbackToSubmit below\n        feedback: value.feedback,\n      }),\n      headers: { \"Content-Type\": \"application/json\" },\n      //Validation: ContentType\n    })\n      .then((res) => res.json()) //res.json() is an async function\n      .then((data) => {\n        console.log(data, \"Thanks for the feedback: \" + feedback);\n        setFeedback(\"\");//Resets the form\n\n        setIsModalVisible(false); //closes the modal\n        successMsg(); //message confirming to the user that the feedback has gone through\n      }) \n      .catch((error) => {\n        errorMsg(); //message alerting user that there has been an error and they may need to try again\n        console.log(error, \"my error\");\n      }); //uncaught promise rejection. The promise throws and error and I need to catch otherwise it will be thrown into the ether\n  }\n\n  //This function changes the feedback state to whatever is inserted into the feedback textbox onChange\n  function handleChange(e) {\n    // e.preventDefault();\n    if (e.target.id === \"feedback\") {\n      setFeedback(e.target.value);\n    }\n  }\n\n  //handleSubmit takes the feedback state, and the video id (from params; see \"ref\" above) and posts it to postFeedback as an object\n  function handleSubmit(e) {\n    e.preventDefault();\n    const feedbackToSubmit = {\n      videoId: ref,\n      feedback: feedback,\n    };\n    postFeedback(feedbackToSubmit);\n    // console.log({feedbackToSubmit});\n  }\n  const showModal = () => {//Sets modal visibility to true\n    setIsModalVisible(true);\n  };\n\n  const handleCancel = () => {//Sets modal visibility to false, used if the user has pressed cancel\n    setIsModalVisible(false);\n  };\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={showModal}>\n        Give Feedback\n      </Button>\n      <Modal\n        title=\"Give Feedback on this lecture\"\n        visible={isModalVisible}\n        onOk={handleSubmit}\n        onCancel={handleCancel}\n      >\n        <div>\n          <div id=\"feedback-form-container\">\n            <form>\n              <TextArea\n                id=\"feedback\"\n                placeholder=\"Insert Feedback\"\n                value={feedback}\n                onChange={handleChange}\n              />\n            </form>\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n}\n",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":29,"nodeType":"98","messageId":"99","endLine":1,"endColumn":38},{"ruleId":"96","severity":1,"message":"100","line":18,"column":7,"nodeType":"98","messageId":"99","endLine":18,"endColumn":16},{"ruleId":"96","severity":1,"message":"101","line":25,"column":7,"nodeType":"98","messageId":"99","endLine":25,"endColumn":10},{"ruleId":"102","severity":1,"message":"103","line":20,"column":6,"nodeType":"104","endLine":20,"endColumn":17,"suggestions":"105"},{"ruleId":"96","severity":1,"message":"106","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":27},{"ruleId":"96","severity":1,"message":"107","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":19},{"ruleId":"108","severity":1,"message":"109","line":69,"column":37,"nodeType":"110","messageId":"111","endLine":69,"endColumn":39},{"ruleId":"102","severity":1,"message":"112","line":153,"column":6,"nodeType":"104","endLine":153,"endColumn":8,"suggestions":"113"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":29,"nodeType":"98","messageId":"99","endLine":1,"endColumn":38},{"ruleId":"96","severity":1,"message":"114","line":1,"column":40,"nodeType":"98","messageId":"99","endLine":1,"endColumn":48},{"ruleId":"96","severity":1,"message":"115","line":5,"column":19,"nodeType":"98","messageId":"99","endLine":5,"endColumn":24},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'gridStyle' is assigned a value but never used.","'api' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allVideoData' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["118"],"'useContext' is defined but never used.","'placeholder' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["119"],"'useState' is defined but never used.","'Space' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [allVideoData, id, videoData]",{"range":"124","text":"125"},"Update the dependencies array to be: [form]",{"range":"126","text":"127"},[635,646],"[allVideoData, id, videoData]",[4262,4264],"[form]"]