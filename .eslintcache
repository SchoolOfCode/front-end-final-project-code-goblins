[{"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\index.js":"1","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js":"2","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js":"3","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js":"4","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js":"5","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js":"6","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js":"7","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js":"8","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js":"9","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js":"10","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js":"11","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js":"12","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js":"13","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js":"14","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\tags.js":"15","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\tutors.js":"16","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js":"17","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js":"18","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Core\\index.js":"19"},{"size":798,"mtime":1609945864378,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1609945864379,"results":"22","hashOfConfig":"21"},{"size":645,"mtime":1609945864377,"results":"23","hashOfConfig":"21"},{"size":492,"mtime":1609945864375,"results":"24","hashOfConfig":"21"},{"size":2106,"mtime":1610014029729,"results":"25","hashOfConfig":"21"},{"size":475,"mtime":1609945864377,"results":"26","hashOfConfig":"21"},{"size":159,"mtime":1609945864376,"results":"27","hashOfConfig":"21"},{"size":2712,"mtime":1610011515463,"results":"28","hashOfConfig":"21"},{"size":2089,"mtime":1609945864373,"results":"29","hashOfConfig":"21"},{"size":1819,"mtime":1610012392416,"results":"30","hashOfConfig":"21"},{"size":12235,"mtime":1610011515462,"results":"31","hashOfConfig":"21"},{"size":512,"mtime":1609945864374,"results":"32","hashOfConfig":"21"},{"size":1953,"mtime":1610012263132,"results":"33","hashOfConfig":"21"},{"size":174,"mtime":1609945864374,"results":"34","hashOfConfig":"21"},{"size":366,"mtime":1609945864376,"results":"35","hashOfConfig":"21"},{"size":335,"mtime":1609945864376,"results":"36","hashOfConfig":"21"},{"size":3700,"mtime":1609945864371,"results":"37","hashOfConfig":"21"},{"size":166,"mtime":1609945864370,"results":"38","hashOfConfig":"21"},{"size":101,"mtime":1610013138516,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"tl36v",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\index.js",[],["84","85"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js",["86"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js",["87"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport ReactPlayer from \"react-player\";\r\nimport \"./style.css\";\r\nimport FeedbackForm from \"../FeedbackForm\";\r\nimport { Tabs, Spin } from \"antd\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function LectureViewer({ allVideoData }) {\r\n  const id = useLocation().pathname.split(\"/\").pop();\r\n  const player = useRef(null);\r\n  const [videoData, setVideoData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (videoData === null) {\r\n      const data = allVideoData.filter((obj) => obj.id === Number(id));\r\n      setVideoData(data[0]);\r\n    }\r\n  }, [videoData]);\r\n  console.log(videoData);\r\n  function seekToTimestamp(seconds) {\r\n    return player.current.seekTo(seconds);\r\n  }\r\n\r\n  if (!videoData) {\r\n    return <Spin />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>\r\n        {videoData.title} - {videoData.lecturer}\r\n      </h1>\r\n      <p>\r\n        <strong>video id:</strong> {videoData.id}\r\n      </p>\r\n      <div id=\"display\">\r\n        <ReactPlayer ref={player} url={videoData.video_url} controls={true} />\r\n        <div id=\"video-sidebar\">\r\n          <div id=\"video-timestamps\">\r\n            <h3>Timestamps</h3>\r\n            {videoData.timestamps.map((value) => {\r\n              return (\r\n                <div>\r\n                  <button\r\n                    onClick={() => seekToTimestamp(value.timeSecondsValue)}\r\n                  >\r\n                    {`${value.timeString} - ${value.timeDesc}`}\r\n                  </button>\r\n                  <br />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <Tabs size=\"small\" style={{ width: \"500px\" }} defaultActiveKey=\"1\">\r\n            <TabPane tab=\"Video Description\" key=\"1\">\r\n              <p>{videoData.description}</p>\r\n            </TabPane>\r\n            <TabPane tab=\"Resources\" key=\"2\">\r\n              Here are some resource links <br />\r\n              <a\r\n                href={videoData.github_links}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Github\r\n              </a>\r\n              <br />\r\n              <a\r\n                href={videoData.slides}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Slides\r\n              </a>\r\n              <br />\r\n              <a\r\n                href={videoData.other_links}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Additional Reading\r\n              </a>\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n      <FeedbackForm />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js",["88"],"import React, { useEffect, useState } from \"react\";\r\nimport { Card, Col, Row, Tag } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport HeaderBar from \"../HeaderBar\";\r\n\r\nexport default function VideoSelectionPage({ allVideoData }) {\r\n  const [videoData, setVideoData] = useState(allVideoData);\r\n  const [searchState, setSearchState] = useState({ search: \"\" });\r\n\r\n  function updateSearch(search) {\r\n    setSearchState({ ...searchState, search: search });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (searchState) {\r\n      async function getSearchData() {\r\n        const response = await fetch(\r\n          process.env.REACT_APP_BACKEND_URL + `/?search=${searchState.search}`\r\n        );\r\n        const data = await response.json();\r\n        setVideoData(data);\r\n      }\r\n      getSearchData();\r\n    } else setVideoData(allVideoData);\r\n  }, [searchState]);\r\n\r\n  if (!videoData) {\r\n    return <p>loading...</p>;\r\n  } else\r\n    return (\r\n      <>\r\n        <HeaderBar updateSearch={updateSearch} />\r\n        <Row gutter={15}>\r\n          {videoData.map((data) => {\r\n            return (\r\n              <Col key={data.id}>\r\n                <Link to={`/videoviewer/${data.id}`}>\r\n                  <Card\r\n                    hoverable\r\n                    style={{ width: 200, height: 320 }}\r\n                    bordered={true}\r\n                    className=\"video-card\"\r\n                    title={data.title}\r\n                    cover={<img alt=\"placeholder\" src={data.thumbnail_url} />}\r\n                  >\r\n                    <p>Lecturer: {data.lecturer}</p>\r\n                    {data.tags.map((tag) => (\r\n                      <Tag>{tag}</Tag>\r\n                    ))}\r\n                  </Card>\r\n                </Link>\r\n              </Col>\r\n            );\r\n          })}\r\n        </Row>\r\n      </>\r\n    );\r\n}\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js",["89","90"],"import React, { useEffect, useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  DatePicker,\r\n  InputNumber,\r\n  Space,\r\n  Select,\r\n  TimePicker,\r\n  Spin,\r\n} from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport selectTags from \"../../data/tags\"; //new datasource, see data folder /******** API + DB TABLE REQUIRED ********/\r\nimport tutors from \"../../data/tutors\"; //new datasource, see data folder /******** API + DB TABLE REQUIRED ********/\r\n\r\nconst { Option } = Select;\r\n\r\n//global required field rules object, default false\r\nconst ruleSetRequired = [\r\n  {\r\n    required: true,\r\n    message: \"Input required\",\r\n  },\r\n];\r\n\r\n//simple layout configuation objects\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 8,\r\n  },\r\n};\r\n\r\n//start of component function\r\nfunction CoachCMS() {\r\n  const [tags, setTags] = useState([]); //used for tags field\r\n  const [vimeoVideoSelect, setVimeoVideoSelect] = useState([]); //used for API call to vimeo for video selector\r\n\r\n  //direct form control via usefor - do not use setState\r\n  const [form] = Form.useForm();\r\n\r\n  //time converstion function for form submit object, returns total seconds for each instance\r\n  function timeCovertToSeconds(timeString) {\r\n    const timeSplit = String(timeString).split(\" \")[4].split(\":\");\r\n    const hoursToSeconds = Number(timeSplit[0]) * 60 * 60;\r\n    const minutesToSeconds = Number(timeSplit[1]) * 60;\r\n    const timeInSeconds =\r\n      hoursToSeconds + minutesToSeconds + Number(timeSplit[2]);\r\n    return timeInSeconds;\r\n  }\r\n\r\n  function convertArrayToString(array) {\r\n    return array.map((value) => JSON.stringify(value).split('\"')[3]);\r\n  }\r\n\r\n  //submit form function\r\n  const submitForm = (values) => {\r\n    const timestamps = [];\r\n    values.timestamps.map((timeObj) => {\r\n      timestamps.push({\r\n        timeString: String(timeObj.timestampSelect._d).split(\" \")[4],\r\n        timeSecondsValue: timeCovertToSeconds(timeObj.timestampSelect._d),\r\n        timeDesc: timeObj.timestampDesc,\r\n      });\r\n    });\r\n\r\n    postResource({\r\n      ...values,\r\n      tags: tags,\r\n      date: String(values.lecture_date._d).split(\" \").slice(0, 4).join(\" \"),\r\n      timestamps: timestamps,\r\n      other_links: convertArrayToString(values.other_links),\r\n      slides: convertArrayToString(values.slides),\r\n      github_links: convertArrayToString(values.git_links),\r\n    });\r\n    onReset();\r\n  };\r\n\r\n  //form reset button function\r\n  const onReset = () => {\r\n    form.resetFields();\r\n    form.setFieldsValue({\r\n      vimeoAPI: \"\",\r\n    });\r\n    setTags([]);\r\n  };\r\n\r\n  //Post request async function\r\n  async function postResource(resource) {\r\n    const api = \"/\";\r\n    await fetch(process.env.REACT_APP_BACKEND_URL + api, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(resource),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n\r\n  //api call to vimeo for video selection, also creates and populates select component input\r\n  useEffect(() => {\r\n    async function getVimeoVideoList() {\r\n      const response = await fetch(`https://api.vimeo.com/me/videos`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: \"bearer \" + process.env.REACT_APP_VIMEO_TOKEN,\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/vnd.vimeo.*+json;version=3.4\",\r\n        },\r\n      });\r\n      const data = await response.json();\r\n\r\n      setVimeoVideoSelect(\r\n        <Select\r\n          style={{ width: 250 }}\r\n          onChange={(value) => {\r\n            form.setFieldsValue({\r\n              title: value[0],\r\n              video_url: value[1],\r\n              thumbnail_url: value[2],\r\n            });\r\n          }}\r\n        >\r\n          {data.data.map((video) => (\r\n            <Option\r\n              key={video.link}\r\n              value={[\r\n                video.name,\r\n                video.link,\r\n                video.pictures.sizes[5].link,\r\n                video.created_time,\r\n              ]}\r\n            >\r\n              {`${video.name} - ${video.created_time\r\n                .split(\"T\")[0]\r\n                .split(\"-\")\r\n                .reverse()\r\n                .join(\"-\")}`}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      );\r\n    }\r\n    getVimeoVideoList();\r\n  }, []);\r\n\r\n  //start of rendering\r\n  return (\r\n    <>\r\n      <h1>Coach CMS Form</h1>\r\n\r\n      <Form\r\n        {...layout}\r\n        name=\"cms\"\r\n        form={form}\r\n        initialValues={{\r\n          remember: false,\r\n        }}\r\n        onFinish={submitForm}\r\n      >\r\n        <Form.Item label=\"Vimeo API Video Select\">\r\n          {!!vimeoVideoSelect ? vimeoVideoSelect : <Spin />}\r\n        </Form.Item>\r\n        <Form.Item label=\"Video Title\" name=\"title\" rules={ruleSetRequired}>\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Lecturer / Speaker Name\"\r\n          name=\"lecturer\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Select allowClear>{tutors.map((tutor) => tutor)}</Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Video URL\" name=\"video_url\" rules={ruleSetRequired}>\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Thumbnail URL\"\r\n          name=\"thumbnail_url\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item label=\"Tags\" rules={ruleSetRequired}>\r\n          <Select\r\n            name=\"tags\"\r\n            mode=\"multiple\"\r\n            value={tags}\r\n            allowClear\r\n            style={{ width: \"100%\" }}\r\n            placeholder=\"Select tags\"\r\n            onChange={(value) => {\r\n              setTags(value);\r\n            }}\r\n          >\r\n            {selectTags}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Lecture Date\"\r\n          name=\"lecture_date\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <DatePicker />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Bootcamp Week\"\r\n          name=\"bootcamp_week\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <InputNumber min={1} />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Video Description\"\r\n          name=\"description\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Input.TextArea autoSize={{ minRows: 8 }} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Timestamps\" required>\r\n          <Form.List name=\"timestamps\" rules={ruleSetRequired}>\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timestampSelect\"]}\r\n                      fieldKey={[field.fieldKey, \"timestampSelect\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <TimePicker />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timestampDesc\"]}\r\n                      label=\"Description\"\r\n                      style={{ width: \"350px\" }}\r\n                      fieldKey={[field.fieldKey, \"timestampDesc\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Timestamp\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Github Links\">\r\n          <Form.List name=\"git_links\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"gitlink\"]}\r\n                      style={{ width: \"300px\" }}\r\n                      fieldKey={[field.fieldKey, \"gitlink\"]}\r\n                    >\r\n                      <Input placeholder=\"url\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Github Link\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Slide Links\">\r\n          <Form.List name=\"slides\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"slidelink\"]}\r\n                      style={{ width: \"300px\" }}\r\n                      fieldKey={[field.fieldKey, \"slidelink\"]}\r\n                    >\r\n                      <Input placeholder=\"url\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Slide Link\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Other Links\">\r\n          <Form.List name=\"other_links\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"otherlink\"]}\r\n                      style={{ width: \"300px\" }}\r\n                      fieldKey={[field.fieldKey, \"otherlink\"]}\r\n                    >\r\n                      <Input placeholder=\"url\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Other Link\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n          <Button htmlType=\"button\" onClick={onReset}>\r\n            Reset\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CoachCMS;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js",["91","92"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./style.css\";\r\nimport socLogo from \"../../images/soc-logo.png\";\r\nimport app from \"../../firebase/Base\";\r\nimport { AuthContext } from \"../../firebase/Auth\";\r\nimport ContentManagementLink from \"../ContentManagementLink\";\r\nimport { AdminUsersContext } from \"../../contexts/adminUsersContext\";\r\nimport { Button, Input } from \"antd\";\r\n\r\n// const { Header } = Layout;\r\nconst { Search } = Input;\r\n\r\nfunction HeaderBar({ updateSearch }) {\r\n  const { currentUser } = useContext(AuthContext);\r\n  const adminUsers = useContext(AdminUsersContext);\r\n\r\n  const onSearch = (value) => updateSearch(value);\r\n\r\n  return (\r\n    <header>\r\n      <div id=\"header-content\">\r\n        <div id=\"logo-nav-wrapper\">\r\n          <Link to=\"/\">\r\n            <img src={socLogo} alt=\"logo\" id=\"soc-logo\" />\r\n          </Link>\r\n          <nav>\r\n            <ul>\r\n              <li>Tutorials</li>\r\n              <li>Lectures</li>\r\n              {adminUsers[0].find(\r\n                (user) => user.email === currentUser.email\r\n              ) ? (\r\n                <ContentManagementLink />\r\n              ) : (\r\n                <li style={{ display: \"none\" }}></li>\r\n              )}\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        <div id=\"search-signout-wrapper\">\r\n          <div id=\"search-box\">\r\n            <Search\r\n              placeholder=\"input search text\"\r\n              allowClear={true}\r\n              onSearch={onSearch}\r\n              style={{ width: 200 }}\r\n            />\r\n          </div>\r\n          <Button\r\n            onClick={() => app.auth().signOut()}\r\n            style={{\r\n              background: \"#31986A\",\r\n              borderRadius: \"10px\",\r\n              height: \"50px\",\r\n            }}\r\n          >\r\n            Sign Out\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default HeaderBar;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\tags.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\tutors.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js",["93"],"import React, { useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./style.css\";\r\nimport { Modal, Button, Input } from \"antd\";\r\nimport { message, Space } from \"antd\";\r\n\r\nconst { TextArea } = Input;\r\n\r\n//Feedback success messages. Edit these to display different messages depending the success of the feedback form submit.\r\n\r\nfunction successMsg() { //Displays on feedback success\r\n  message.success(\"Thanks for your feedback!\");\r\n}\r\n\r\nfunction errorMsg() {//Displays on feedback error\r\n  message.error(\"An error occured. Please try again.\");\r\n}\r\n\r\n//Gets the video id from the url\r\nlet url = window.location.href; //gets the whole url\r\nlet split = url.split(\"/\"); //splits the url into an array by /\r\nlet ref = split[split.length - 1]; //Collects the last part of the array, which in this case will be the video id that is displaying on this page\r\n\r\n//Sets whether or not the modal is visable\r\nexport default function FeedbackModal() {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n\r\n  //Posts the feedback to the database\r\n  function postFeedback(value) {//Value is the feedback to be submitted\r\n    fetch(`http://localhost:5000/feedback`, { //Change this url on deployment\r\n      method: \"post\",\r\n      body: JSON.stringify({\r\n        videoId: value.videoId, //Taken from ref - see feedbackToSubmit below\r\n        feedback: value.feedback,\r\n      }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      //Validation: ContentType\r\n    })\r\n      .then((res) => res.json()) //res.json() is an async function\r\n      .then((data) => {\r\n        console.log(data, \"Thanks for the feedback: \" + feedback);\r\n        setFeedback(\"\");//Resets the form\r\n\r\n        setIsModalVisible(false); //closes the modal\r\n        successMsg(); //message confirming to the user that the feedback has gone through\r\n      }) \r\n      .catch((error) => {\r\n        errorMsg(); //message alerting user that there has been an error and they may need to try again\r\n        console.log(error, \"my error\");\r\n      }); //uncaught promise rejection. The promise throws and error and I need to catch otherwise it will be thrown into the ether\r\n  }\r\n\r\n  //This function changes the feedback state to whatever is inserted into the feedback textbox onChange\r\n  function handleChange(e) {\r\n    // e.preventDefault();\r\n    if (e.target.id === \"feedback\") {\r\n      setFeedback(e.target.value);\r\n    }\r\n  }\r\n\r\n  //handleSubmit takes the feedback state, and the video id (from params; see \"ref\" above) and posts it to postFeedback as an object\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const feedbackToSubmit = {\r\n      videoId: ref,\r\n      feedback: feedback,\r\n    };\r\n    postFeedback(feedbackToSubmit);\r\n    // console.log({feedbackToSubmit});\r\n  }\r\n  const showModal = () => {//Sets modal visibility to true\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleCancel = () => {//Sets modal visibility to false, used if the user has pressed cancel\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        Give Feedback\r\n      </Button>\r\n      <Modal\r\n        title=\"Give Feedback on this lecture\"\r\n        visible={isModalVisible}\r\n        onOk={handleSubmit}\r\n        onCancel={handleCancel}\r\n      >\r\n        <div>\r\n          <div id=\"feedback-form-container\">\r\n            <form>\r\n              <TextArea\r\n                id=\"feedback\"\r\n                placeholder=\"Insert Feedback\"\r\n                value={feedback}\r\n                onChange={handleChange}\r\n              />\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Core\\index.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":15,"column":7,"nodeType":"100","messageId":"101","endLine":15,"endColumn":16},{"ruleId":"102","severity":1,"message":"103","line":20,"column":6,"nodeType":"104","endLine":20,"endColumn":17,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":25,"column":6,"nodeType":"104","endLine":25,"endColumn":19,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":69,"column":37,"nodeType":"110","messageId":"111","endLine":69,"endColumn":39},{"ruleId":"102","severity":1,"message":"112","line":153,"column":6,"nodeType":"104","endLine":153,"endColumn":8,"suggestions":"113"},{"ruleId":"98","severity":1,"message":"114","line":1,"column":29,"nodeType":"100","messageId":"101","endLine":1,"endColumn":38},{"ruleId":"98","severity":1,"message":"115","line":1,"column":40,"nodeType":"100","messageId":"101","endLine":1,"endColumn":48},{"ruleId":"98","severity":1,"message":"116","line":5,"column":19,"nodeType":"100","messageId":"101","endLine":5,"endColumn":24},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'gridStyle' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allVideoData' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["119"],"React Hook useEffect has a missing dependency: 'allVideoData'. Either include it or remove the dependency array. If 'setVideoData' needs the current value of 'allVideoData', you can also switch to useReducer instead of useState and read 'allVideoData' in the reducer.",["120"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["121"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Space' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [allVideoData, id, videoData]",{"range":"128","text":"129"},"Update the dependencies array to be: [allVideoData, searchState]",{"range":"130","text":"131"},"Update the dependencies array to be: [form]",{"range":"132","text":"133"},[654,665],"[allVideoData, id, videoData]",[842,855],"[allVideoData, searchState]",[4414,4416],"[form]"]