[{"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\index.js":"1","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js":"2","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js":"3","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js":"4","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js":"5","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js":"6","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js":"7","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\data\\data.js":"8","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js":"9","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js":"10","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js":"11","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js":"12","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js":"13","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js":"14","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js":"15","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\data\\tags.js":"16","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\data\\tutors.js":"17","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js":"18","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js":"19"},{"size":798,"mtime":1609865511736,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1608629583402,"results":"22","hashOfConfig":"21"},{"size":492,"mtime":1609858982113,"results":"23","hashOfConfig":"21"},{"size":645,"mtime":1609858982117,"results":"24","hashOfConfig":"21"},{"size":2042,"mtime":1609865526923,"results":"25","hashOfConfig":"21"},{"size":475,"mtime":1609858982118,"results":"26","hashOfConfig":"21"},{"size":159,"mtime":1609858982114,"results":"27","hashOfConfig":"21"},{"size":3240,"mtime":1609858982115,"results":"28","hashOfConfig":"21"},{"size":1167,"mtime":1609865526925,"results":"29","hashOfConfig":"21"},{"size":2712,"mtime":1609865511732,"results":"30","hashOfConfig":"21"},{"size":1467,"mtime":1609858982104,"results":"31","hashOfConfig":"21"},{"size":512,"mtime":1609858982108,"results":"32","hashOfConfig":"21"},{"size":12235,"mtime":1609865526924,"results":"33","hashOfConfig":"21"},{"size":2089,"mtime":1609858982107,"results":"34","hashOfConfig":"21"},{"size":174,"mtime":1609858982109,"results":"35","hashOfConfig":"21"},{"size":366,"mtime":1609858982116,"results":"36","hashOfConfig":"21"},{"size":335,"mtime":1609858982116,"results":"37","hashOfConfig":"21"},{"size":2392,"mtime":1609874201312,"results":"38","hashOfConfig":"21"},{"size":166,"mtime":1609858982103,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1eiv5ss",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\index.js",[],["83","84"],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js",["85","86","87"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nimport { Layout } from \"antd\";\r\n\r\nimport { AuthContext } from \"../../firebase/Auth\";\r\nimport { AdminUsersContext } from \"../../contexts/adminUsersContext\";\r\n\r\nimport VideoSelectionPage from \"../VideoSelectionPage\";\r\nimport LectureViewer from \"../LectureViewer\";\r\nimport CoachCMS from \"../CoachCMS\";\r\nimport HeaderBar from \"../HeaderBar\";\r\nimport Login from \"../Login\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport Restricted from \"../Restricted\";\r\n\r\nconst gridStyle = {\r\n  width: \"25%\",\r\n  textAlign: \"center\",\r\n};\r\n\r\nconst { Footer, Content } = Layout;\r\n\r\nconst api = `/`;\r\n\r\nfunction App() {\r\n  const { currentUser } = useContext(AuthContext);\r\n  const adminUsers = useContext(AdminUsersContext);\r\n  const [allVideoData, setAllVideoData] = useState([]);\r\n  console.log(allVideoData);\r\n  useEffect(() => {\r\n    async function getAllVideoData() {\r\n      const response = await fetch(process.env.REACT_APP_BACKEND_URL + api);\r\n      const data = await response.json();\r\n      setAllVideoData(data);\r\n    }\r\n    getAllVideoData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path=\"/login\" component={Login} />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <>\r\n              <HeaderBar />\r\n              <VideoSelectionPage allVideoData={allVideoData} />\r\n            </>\r\n          )}\r\n        />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          path={\"/videoviewer/:id\"}\r\n          render={() => <LectureViewer allVideoData={allVideoData} />}\r\n        />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          path={\"/cms\"}\r\n          render={() =>\r\n            adminUsers[0].find((user) => user.email === currentUser.email) ? (\r\n              <CoachCMS />\r\n            ) : (\r\n              <Restricted />\r\n            )\r\n          }\r\n        />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\data\\data.js",[],["88","89"],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js",["90"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport ReactPlayer from \"react-player\";\r\nimport \"./style.css\";\r\nimport FeedbackForm from \"../FeedbackForm\";\r\nimport { Tabs, Spin } from \"antd\";\r\nimport { DataContext } from \"../../contexts/dataContext\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function LectureViewer() {\r\n  const id = useLocation().pathname.split(\"/\").pop();\r\n  const player = useRef(null);\r\n  const [videoData, setVideoData] = useState(null);\r\n  const mockData = useContext(DataContext);\r\n\r\n  useEffect(() => {\r\n    if (videoData === null) {\r\n      const data = mockData.filter((obj) => obj.id === Number(id));\r\n      setVideoData(data[0]);\r\n    }\r\n  }, [videoData]);\r\n\r\n  function seekToTimestamp(seconds) {\r\n    return player.current.seekTo(seconds);\r\n  }\r\n\r\n  function convertSeconds(time) {\r\n    let minutes = Math.floor(time / 60);\r\n    let seconds = time - minutes * 60;\r\n    return minutes === 0 && seconds === 0 ? `start` : `${minutes}m ${seconds}s`;\r\n  }\r\n\r\n  if (!videoData) {\r\n    return <Spin />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>\r\n        {videoData.title} - {videoData.lecturer}\r\n      </h1>\r\n      <p>\r\n        <strong>video id:</strong> {id}\r\n      </p>\r\n      <div id=\"display\">\r\n        <ReactPlayer ref={player} url={videoData.url} controls={true} />\r\n        <div id=\"video-sidebar\">\r\n          <div id=\"video-timestamps\">\r\n            <h3>Timestamps</h3>\r\n            {videoData.timestamps.map((value) => {\r\n              return (\r\n                <div>\r\n                  <button onClick={() => seekToTimestamp(value.time)}>\r\n                    {`${convertSeconds(value.time)} - ${value.timedesc}`}\r\n                  </button>\r\n                  <br />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <Tabs size=\"small\" style={{ width: \"500px\" }} defaultActiveKey=\"1\">\r\n            <TabPane tab=\"Video Description\" key=\"1\">\r\n              <p>{videoData.description}</p>\r\n            </TabPane>\r\n            <TabPane tab=\"Resources\" key=\"2\">\r\n              Here are some resource links <br />\r\n              Github repo\r\n              <br />\r\n              Slides\r\n              <br />\r\n              Other stuff\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n      <FeedbackForm />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js",["91","92"],"import React, { useEffect, useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  DatePicker,\r\n  InputNumber,\r\n  Space,\r\n  Select,\r\n  TimePicker,\r\n  Spin,\r\n} from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport selectTags from \"../../data/tags\"; //new datasource, see data folder /******** API + DB TABLE REQUIRED ********/\r\nimport tutors from \"../../data/tutors\"; //new datasource, see data folder /******** API + DB TABLE REQUIRED ********/\r\n\r\nconst { Option } = Select;\r\n\r\n//global required field rules object, default false\r\nconst ruleSetRequired = [\r\n  {\r\n    required: true,\r\n    message: \"Input required\",\r\n  },\r\n];\r\n\r\n//simple layout configuation objects\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 8,\r\n  },\r\n};\r\n\r\n//start of component function\r\nfunction CoachCMS() {\r\n  const [tags, setTags] = useState([]); //used for tags field\r\n  const [vimeoVideoSelect, setVimeoVideoSelect] = useState([]); //used for API call to vimeo for video selector\r\n\r\n  //direct form control via usefor - do not use setState\r\n  const [form] = Form.useForm();\r\n\r\n  //time converstion function for form submit object, returns total seconds for each instance\r\n  function timeCovertToSeconds(timeString) {\r\n    const timeSplit = String(timeString).split(\" \")[4].split(\":\");\r\n    const hoursToSeconds = Number(timeSplit[0]) * 60 * 60;\r\n    const minutesToSeconds = Number(timeSplit[1]) * 60;\r\n    const timeInSeconds =\r\n      hoursToSeconds + minutesToSeconds + Number(timeSplit[2]);\r\n    return timeInSeconds;\r\n  }\r\n\r\n  //submit form function\r\n  const submitForm = (values) => {\r\n    const timestamps = [];\r\n\r\n    values.timestamps.map((timeObj) => {\r\n      timestamps.push({\r\n        timeString: String(timeObj.timestampSelect._d).split(\" \")[4],\r\n        timeSecondsValue: timeCovertToSeconds(timeObj.timestampSelect._d),\r\n        timeDesc: timeObj.timestampDesc,\r\n      });\r\n    });\r\n\r\n    /******** API REQUIRED ********/\r\n    console.log({\r\n      ...values,\r\n      tags: tags,\r\n      date: String(values.date._d).split(\" \").slice(0, 4).join(\" \"),\r\n      timestamps: timestamps,\r\n    }); //POST API\r\n    console.log();\r\n  };\r\n\r\n  //form reset button function\r\n  const onReset = () => {\r\n    form.resetFields();\r\n    form.setFieldsValue({\r\n      vimeoAPI: \"\",\r\n    });\r\n    setTags([]);\r\n  };\r\n\r\n  //api call to vimeo for video selection, also creates and populates select component input\r\n  useEffect(() => {\r\n    async function getVimeoVideoList() {\r\n      const response = await fetch(`https://api.vimeo.com/me/videos`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: \"bearer \" + process.env.REACT_APP_VIMEO_TOKEN,\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/vnd.vimeo.*+json;version=3.4\",\r\n        },\r\n      });\r\n      const data = await response.json();\r\n\r\n      setVimeoVideoSelect(\r\n        <Select\r\n          style={{ width: 250 }}\r\n          onChange={(value) => {\r\n            form.setFieldsValue({\r\n              videoTitle: value[0],\r\n              videoUrl: value[1],\r\n              thumbnailUrl: value[2],\r\n            });\r\n          }}\r\n        >\r\n          {data.data.map((video) => (\r\n            <Option\r\n              key={video.link}\r\n              value={[\r\n                video.name,\r\n                video.link,\r\n                video.pictures.sizes[5].link,\r\n                video.created_time,\r\n              ]}\r\n            >\r\n              {`${video.name} - ${video.created_time\r\n                .split(\"T\")[0]\r\n                .split(\"-\")\r\n                .reverse()\r\n                .join(\"-\")}`}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      );\r\n    }\r\n    getVimeoVideoList();\r\n  }, []);\r\n\r\n  //start of rendering\r\n  return (\r\n    <>\r\n      <h1>Coach CMS Form</h1>\r\n\r\n      <Form\r\n        {...layout}\r\n        name=\"cms\"\r\n        form={form}\r\n        initialValues={{\r\n          remember: false,\r\n        }}\r\n        onFinish={submitForm}\r\n      >\r\n        <Form.Item label=\"Vimeo API Video Select\" name=\"vimeoAPI\">\r\n          {!!vimeoVideoSelect ? vimeoVideoSelect : <Spin />}\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Video Title\"\r\n          name=\"videoTitle\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Lecturer / Speaker Name\"\r\n          name=\"lecturer\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Select allowClear>{tutors.map((tutor) => tutor)}</Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Video URL\" name=\"videoUrl\" rules={ruleSetRequired}>\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Thumbnail URL\"\r\n          name=\"thumbnailUrl\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item label=\"Tags\" rules={ruleSetRequired}>\r\n          <Select\r\n            name=\"tags\"\r\n            mode=\"multiple\"\r\n            value={tags}\r\n            allowClear\r\n            style={{ width: \"100%\" }}\r\n            placeholder=\"Select tags\"\r\n            onChange={(value) => {\r\n              setTags(value);\r\n            }}\r\n          >\r\n            {selectTags}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Lecture Date\" name=\"date\" rules={ruleSetRequired}>\r\n          <DatePicker />\r\n        </Form.Item>\r\n        <Form.Item label=\"Bootcamp Week\" name=\"week\" rules={ruleSetRequired}>\r\n          <InputNumber min={1} />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Video Description\"\r\n          name=\"videoDesc\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Input.TextArea autoSize={{ minRows: 8 }} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Timestamps\" required>\r\n          <Form.List name=\"timestamps\" rules={ruleSetRequired}>\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timestampSelect\"]}\r\n                      fieldKey={[field.fieldKey, \"timestampSelect\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <TimePicker />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timestampDesc\"]}\r\n                      label=\"Description\"\r\n                      style={{ width: \"350px\" }}\r\n                      fieldKey={[field.fieldKey, \"timestampDesc\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Timestamp\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Github Links\">\r\n          <Form.List name=\"gitLinks\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"gitlink\"]}\r\n                      style={{ width: \"300px\" }}\r\n                      fieldKey={[field.fieldKey, \"gitlink\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <Input placeholder=\"url\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Github Link\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Slide Links\">\r\n          <Form.List name=\"slideLinks\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"slidelink\"]}\r\n                      style={{ width: \"300px\" }}\r\n                      fieldKey={[field.fieldKey, \"slidelink\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <Input placeholder=\"url\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Slide Link\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Other Links\">\r\n          <Form.List name=\"otherLinks\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"otherlink\"]}\r\n                      style={{ width: \"300px\" }}\r\n                      fieldKey={[field.fieldKey, \"otherlink\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <Input placeholder=\"url\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Other Link\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n          <Button htmlType=\"button\" onClick={onReset}>\r\n            Reset\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CoachCMS;\r\n","C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\data\\tags.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\data\\tutors.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js",[],"C:\\Users\\pippo\\desktop\\soc\\final-project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":18,"column":7,"nodeType":"99","messageId":"100","endLine":18,"endColumn":16},{"ruleId":"97","severity":1,"message":"101","line":23,"column":9,"nodeType":"99","messageId":"100","endLine":23,"endColumn":15},{"ruleId":"97","severity":1,"message":"102","line":23,"column":17,"nodeType":"99","messageId":"100","endLine":23,"endColumn":24},{"ruleId":"93","replacedBy":"103"},{"ruleId":"95","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":22,"column":6,"nodeType":"107","endLine":22,"endColumn":17,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":66,"column":37,"nodeType":"111","messageId":"112","endLine":66,"endColumn":39},{"ruleId":"105","severity":1,"message":"113","line":138,"column":6,"nodeType":"107","endLine":138,"endColumn":8,"suggestions":"114"},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'gridStyle' is assigned a value but never used.","Identifier","unusedVar","'Footer' is assigned a value but never used.","'Content' is assigned a value but never used.",["115"],["116"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'mockData'. Either include them or remove the dependency array.","ArrayExpression",["117"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [id, mockData, videoData]",{"range":"123","text":"124"},"Update the dependencies array to be: [form]",{"range":"125","text":"126"},[750,761],"[id, mockData, videoData]",[3876,3878],"[form]"]