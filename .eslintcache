[{"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\index.js":"1","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js":"2","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js":"3","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\searchContext.js":"4","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js":"5","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js":"6","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js":"7","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js":"8","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js":"9","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js":"10","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js":"11","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js":"12","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js":"13","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js":"14","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js":"15","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\config.js":"16","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSLectureEditor\\index.js":"17","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDropdown\\index.js":"18","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSTagEditor\\index.js":"19","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSTimestampSelector\\index.js":"20","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSVideoSelector\\index.js":"21","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FilterBox\\index.js":"22","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js":"23","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js":"24","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDescription\\index.js":"25","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSMenu\\index.js":"26","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Footer\\index.js":"27"},{"size":913,"mtime":1610097440760,"results":"28","hashOfConfig":"29"},{"size":375,"mtime":1609945864379,"results":"30","hashOfConfig":"29"},{"size":492,"mtime":1609945864375,"results":"31","hashOfConfig":"29"},{"size":2229,"mtime":1610569981900,"results":"32","hashOfConfig":"29"},{"size":668,"mtime":1610040754738,"results":"33","hashOfConfig":"29"},{"size":2280,"mtime":1610557686026,"results":"34","hashOfConfig":"29"},{"size":475,"mtime":1609945864377,"results":"35","hashOfConfig":"29"},{"size":159,"mtime":1609945864376,"results":"36","hashOfConfig":"29"},{"size":5484,"mtime":1610573259707,"results":"37","hashOfConfig":"29"},{"size":19856,"mtime":1610461799359,"results":"38","hashOfConfig":"29"},{"size":512,"mtime":1609945864374,"results":"39","hashOfConfig":"29"},{"size":174,"mtime":1609945864374,"results":"40","hashOfConfig":"29"},{"size":1857,"mtime":1610564631820,"results":"41","hashOfConfig":"29"},{"size":3303,"mtime":1610563729062,"results":"42","hashOfConfig":"29"},{"size":3507,"mtime":1610558324415,"results":"43","hashOfConfig":"29"},{"size":1095,"mtime":1610531819843,"results":"44","hashOfConfig":"29"},{"size":6106,"mtime":1610517189095,"results":"45","hashOfConfig":"29"},{"size":898,"mtime":1610461799360,"results":"46","hashOfConfig":"29"},{"size":5512,"mtime":1610461799362,"results":"47","hashOfConfig":"29"},{"size":5571,"mtime":1610531819839,"results":"48","hashOfConfig":"29"},{"size":4956,"mtime":1610379190520,"results":"49","hashOfConfig":"29"},{"size":2560,"mtime":1610569980352,"results":"50","hashOfConfig":"29"},{"size":3768,"mtime":1610461799363,"results":"51","hashOfConfig":"29"},{"size":218,"mtime":1610554080357,"results":"52","hashOfConfig":"29"},{"size":620,"mtime":1610359028734,"results":"53","hashOfConfig":"29"},{"size":781,"mtime":1610461799361,"results":"54","hashOfConfig":"29"},{"size":406,"mtime":1610557610661,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"tl36v",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"58"},"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\index.js",[],["119","120"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\searchContext.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js",["121"],"import React, { useContext } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nimport { AuthContext } from \"../../firebase/Auth\";\r\nimport { AdminUsersContext } from \"../../contexts/adminUsersContext\";\r\n\r\nimport VideoSelectionPage from \"../VideoSelectionPage\";\r\nimport LectureViewer from \"../LectureViewer\";\r\nimport CoachCMS from \"../CoachCMS\";\r\nimport HeaderBar from \"../HeaderBar\";\r\nimport Login from \"../Login\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport Restricted from \"../Restricted\";\r\nimport Footer from \"../Footer\";\r\n\r\nfunction App() {\r\n  const { currentUser } = useContext(AuthContext);\r\n  const adminUsers = useContext(AdminUsersContext);\r\n\r\n  return (\r\n    <>\r\n      <PrivateRoute\r\n        path=\"/\"\r\n        render={() => (\r\n          <>\r\n            <HeaderBar />\r\n          </>\r\n        )}\r\n      />\r\n\r\n      <Switch>\r\n        <Route exact path=\"/login\" component={Login} />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <>\r\n              <VideoSelectionPage />\r\n            </>\r\n          )}\r\n        />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          path={\"/videoviewer/:id\"}\r\n          render={() => (\r\n            <>\r\n              <LectureViewer />\r\n            </>\r\n          )}\r\n        />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          path={\"/cms\"}\r\n          render={() =>\r\n            adminUsers[0].find((user) => user.email === currentUser.email) ? (\r\n              <>\r\n                <CoachCMS />\r\n              </>\r\n            ) : (\r\n              <Restricted />\r\n            )\r\n          }\r\n        />\r\n      </Switch>\r\n\r\n      {/* <PrivateRoute\r\n        path=\"/\"\r\n        render={() => (\r\n          <>\r\n            <footer>\r\n              <div id=\"footer-content\">\r\n                <p>\r\n                  &copy; Copyright 2021 School of Code. All Rights Reserved -\r\n                  Privacy Policy - Terms of Use School of Code Ltd is registered\r\n                  in England, Company No. 09793790 School of Code, Custard\r\n                  Factory, Gibb Street, Birmingham, B9 4AA\r\n                </p>\r\n              </div>\r\n            </footer>\r\n          </>\r\n        )}\r\n      /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js",["122","123"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  DatePicker,\r\n  InputNumber,\r\n  Space,\r\n  Select,\r\n  Switch,\r\n  message,\r\n  Row,\r\n  Col,\r\n} from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { SearchContext } from \"../../contexts/searchContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport TimestampSelector from \"../CoachCMSTimestampSelector\";\r\nimport config from \"../../config\";\r\nimport CmsVideoSelector from \"../CoachCMSVideoSelector\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport CmsDropdown from \"../CoachCMSDropdown\";\r\nimport CmsTagEditor from \"../CoachCMSTagEditor\";\r\nimport CmsLecturerEditor from \"../CoachCMSLectureEditor\";\r\n\r\n//global required field rules object, default false\r\nconst ruleSetRequired = [\r\n  {\r\n    required: true,\r\n    message: \"Input required\",\r\n  },\r\n];\r\n\r\n//simple layout configuation objects\r\nconst formLayout = {\r\n  labelCol: {\r\n    span: 24,\r\n  },\r\n  wrapperCol: {\r\n    span: 24,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 12,\r\n    span: 24,\r\n  },\r\n};\r\n\r\n//start of component function\r\nfunction CoachCMS() {\r\n  const [tags, setTags] = useState([]); //used for tags field\r\n  const { searchText } = useContext(SearchContext);\r\n  const [previousSearch] = useState(searchText);\r\n  const [guestLecturer, setGuestLecturer] = useState(false);\r\n  const [tutorialVideo, setTutorialVideo] = useState(false);\r\n  const [timestampsVisible, setTimestampsVisible] = useState(false);\r\n  const [timestampVideoUrl, setTimestampVideoUrl] = useState(false);\r\n  const [timestampData, setTimestampData] = useState(\"\");\r\n  const [form] = Form.useForm();\r\n\r\n  const [tagEditorVisible, setTagEditorVisible] = useState(false);\r\n  const [tagData, setTagData] = useState(false);\r\n  const [lastTagId, setLastTagId] = useState(null);\r\n\r\n  const [lecturerEditorVisible, setLecturerEditorVisible] = useState(false);\r\n  const [lecturerData, setLecturerData] = useState(false);\r\n  const [lastLecturerId, setLastLecturerId] = useState(null);\r\n\r\n  //tag data and last tag ID from db\r\n  useEffect(() => {\r\n    const getTagData = async () => {\r\n      const resTagData = await fetch(config.BACKEND_URL_TAGS_GET_ALL_DATA);\r\n      const data = await resTagData.json();\r\n\r\n      setTagData(data.sort((a, b) => a.tag - b.tag));\r\n\r\n      const resLastKey = await fetch(config.BACKEND_URL_TAGS_LASTKEY);\r\n      const keydata = await resLastKey.json();\r\n\r\n      setLastTagId(Number(keydata[0].last_value));\r\n    };\r\n    getTagData();\r\n  }, [tagEditorVisible]);\r\n\r\n  //lecturer data and last tag ID from db\r\n  useEffect(() => {\r\n    const getLecturerData = async () => {\r\n      const resLecturerData = await fetch(\r\n        config.BACKEND_URL_LECTURERS_GET_ALL_DATA\r\n      );\r\n      const data = await resLecturerData.json();\r\n      setLecturerData(data.sort((a, b) => a.lecturer - b.lecturer));\r\n\r\n      const resLastKey = await fetch(config.BACKEND_URL_LECTURERS_LASTKEY);\r\n      const keydata = await resLastKey.json();\r\n\r\n      setLastLecturerId(Number(keydata[0].last_value));\r\n\r\n      if (data.length > 0) {\r\n        let tempTagData = data.sort((a, b) => a.key - b.key);\r\n        setLastLecturerId(tempTagData[tempTagData.length - 1].key);\r\n      }\r\n    };\r\n    getLecturerData();\r\n  }, [lecturerEditorVisible]);\r\n\r\n  useEffect(() => {\r\n    const additionalTags = tags.filter(\r\n      (tag) => tag !== \"lecture\" && tag !== \"guest lecture\"\r\n    );\r\n\r\n    if (additionalTags.length > 0 && !guestLecturer) {\r\n      setTags([...additionalTags, \"lecture\"]);\r\n    } else if (additionalTags.length > 0 && guestLecturer) {\r\n      setTags([...additionalTags, \"guest lecture\"]);\r\n    } else if (additionalTags.length === 0 && !guestLecturer) {\r\n      setTags([\"lecture\"]);\r\n    } else if (additionalTags.length === 0 && guestLecturer) {\r\n      setTags([\"guest lecture\"]);\r\n    }\r\n  }, [guestLecturer]);\r\n\r\n  useEffect(() => {\r\n    const additionalTags = tags.filter((tag) => tag !== \"tutorial\");\r\n\r\n    if (additionalTags.length > 0 && !tutorialVideo) {\r\n      setTags([...additionalTags]);\r\n    } else if (additionalTags.length > 0 && tutorialVideo) {\r\n      setTags([...additionalTags, \"tutorial\"]);\r\n    }\r\n  }, [tutorialVideo]);\r\n\r\n  if (searchText !== previousSearch) {\r\n    return <Redirect exact to=\"/\" />;\r\n  }\r\n\r\n  const { Option } = Select;\r\n\r\n  //set form data from api video selector\r\n  const setFormVideoData = (selectData) => {\r\n    setTimestampVideoUrl(selectData.url);\r\n    form.setFieldsValue({\r\n      title: selectData.title,\r\n      video_url: selectData.url,\r\n      thumbnail_url: selectData.thumbnail,\r\n    });\r\n    message.success(\"Video selected. Added to form data.\", 1);\r\n  };\r\n\r\n  //link formatter for form submission object\r\n  const setLinkType = (object, resource) =>\r\n    object ? object.map((obj) => Object.assign(obj, { type: resource })) : [];\r\n\r\n  //submit form function\r\n  const submitForm = (values) => {\r\n    postResource({\r\n      ...values,\r\n      tags: tags,\r\n      date: String(values.lecture_date._d).split(\" \").slice(0, 4).join(\" \"),\r\n      timestamps: timestampData,\r\n      github_links: setLinkType(values.github_links, \"github\"),\r\n      slides: setLinkType(values.slides, \"presentation slide\"),\r\n      other_links: setLinkType(values.other_links, \"additional reading\"),\r\n    });\r\n  };\r\n\r\n  const submitFailed = (value) => {\r\n    value.errorFields.map((value) =>\r\n      message.error(\r\n        `${\r\n          value.name[0].slice(0, 1).toUpperCase() + value.name[0].slice(1)\r\n        } field ${value.errors[0].toLowerCase()} `,\r\n        2.5\r\n      )\r\n    );\r\n  };\r\n\r\n  //form reset button function\r\n  const onReset = () => {\r\n    form.resetFields();\r\n    form.setFieldsValue({\r\n      vimeoAPI: \"\",\r\n    });\r\n    setTags([]);\r\n  };\r\n\r\n  //Post request async function\r\n  async function postResource(resource) {\r\n    await fetch(config.BACKEND_URL_ADD_CONTENT, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(resource),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    await message.success(\"Form data submitted successfully\", 1.5, onReset());\r\n  }\r\n\r\n  //show modal\r\n  const modalDisplay = () => {\r\n    const videoUrlInputValue = form.getFieldValue(\"video_url\");\r\n    setTimestampVideoUrl(videoUrlInputValue);\r\n    setTimestampsVisible(!timestampsVisible);\r\n  };\r\n\r\n  const modalHide = () => {\r\n    setTimestampsVisible(false);\r\n  };\r\n\r\n  const getTimeStampData = (obj) => {\r\n    setTimestampData(obj.timestamps);\r\n  };\r\n\r\n  const toggleTagDisplay = () => {\r\n    setTagEditorVisible(!tagEditorVisible);\r\n  };\r\n\r\n  const toggleLecturerDisplay = () => {\r\n    setLecturerEditorVisible(!lecturerEditorVisible);\r\n  };\r\n\r\n  const updateTagData = (value) => {\r\n    setTagData(value);\r\n  };\r\n\r\n  const updateLastTagData = (value) => {\r\n    setLastTagId(value);\r\n  };\r\n\r\n  const updateLecturerData = (value) => {\r\n    setLecturerData(value);\r\n  };\r\n\r\n  const updateLastLecturerId = (value) => {\r\n    setLastLecturerId(value);\r\n  };\r\n\r\n  //start of rendering\r\n  return (\r\n    <div>\r\n      <TimestampSelector\r\n        timestampsVisible={timestampsVisible}\r\n        modalDisplay={modalDisplay}\r\n        timestampVideoUrl={timestampVideoUrl}\r\n        ruleSetRequired={ruleSetRequired}\r\n        submitFailed={submitFailed}\r\n        modalHide={modalHide}\r\n        getTimeStampData={getTimeStampData}\r\n      />\r\n\r\n      <CmsTagEditor\r\n        tagData={tagData}\r\n        updateTagData={updateTagData}\r\n        tagEditorVisible={tagEditorVisible}\r\n        toggleTagDisplay={toggleTagDisplay}\r\n        lastTagId={lastTagId}\r\n        updateLastTagData={updateLastTagData}\r\n      />\r\n\r\n      <CmsLecturerEditor\r\n        lecturerData={lecturerData}\r\n        updateLecturerData={updateLecturerData}\r\n        lecturerEditorVisible={lecturerEditorVisible}\r\n        toggleLecturerDisplay={toggleLecturerDisplay}\r\n        lastLecturerId={lastLecturerId}\r\n        updateLastLecturerId={updateLastLecturerId}\r\n      />\r\n\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"end\">\r\n          <Space>\r\n            <h1>Lecture Management</h1>\r\n          </Space>\r\n        </Row>\r\n\r\n        <Row justify=\"start\">\r\n          <CmsDropdown\r\n            toggleTagDisplay={toggleTagDisplay}\r\n            toggleLecturerDisplay={toggleLecturerDisplay}\r\n          />\r\n        </Row>\r\n\r\n        <Row justify={\"center\"}>\r\n          <Col span={10}>\r\n            <CmsVideoSelector setFormVideoData={setFormVideoData} />\r\n          </Col>\r\n\r\n          <Col span={13}>\r\n            <h3 style={{ marginBottom: \"1em\" }}>Form Data</h3>\r\n            <Form\r\n              style={{ padding: \"1em\" }}\r\n              {...formLayout}\r\n              name=\"cms\"\r\n              form={form}\r\n              initialValues={{\r\n                remember: false,\r\n              }}\r\n              onFinish={submitForm}\r\n              onFinishFailed={(value) => submitFailed(value)}\r\n            >\r\n              <Form.Item\r\n                label=\"Video Title\"\r\n                name=\"title\"\r\n                rules={ruleSetRequired}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Guest Lecturer\"\r\n                // name=\"guest_lecture_switch\"\r\n                valuePropName=\"checked\"\r\n              >\r\n                <Switch\r\n                  onChange={() => {\r\n                    setGuestLecturer(!guestLecturer);\r\n                  }}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label={!guestLecturer ? \"Lecturer Name\" : \"Guest Lecturer Name\"}\r\n                name=\"lecturer\"\r\n                rules={ruleSetRequired}\r\n              >\r\n                {!guestLecturer ? (\r\n                  <Select>\r\n                    {lecturerData ? (\r\n                      lecturerData.map((value) => (\r\n                        <Option key={value.lecturer}>{value.lecturer}</Option>\r\n                      ))\r\n                    ) : (\r\n                      <Option key={\"no data\"}>{\"no data\"}</Option>\r\n                    )}\r\n                  </Select>\r\n                ) : (\r\n                  <Input />\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Video URL\"\r\n                name=\"video_url\"\r\n                rules={ruleSetRequired}\r\n              >\r\n                <Input onChange={(e) => setTimestampVideoUrl(e.target.value)} />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Thumbnail URL\"\r\n                name=\"thumbnail_url\"\r\n                rules={ruleSetRequired}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Tutorial\"\r\n                // name=\"tutorial_switch\"\r\n                valuePropName=\"checked\"\r\n              >\r\n                <Switch\r\n                  onChange={() => {\r\n                    setTutorialVideo(!tutorialVideo);\r\n                  }}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Tags\" rules={ruleSetRequired}>\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  name=\"tags\"\r\n                  value={tags}\r\n                  placeholder=\"Select tags\"\r\n                  onChange={(value) => {\r\n                    setTags(value);\r\n                  }}\r\n                >\r\n                  {tagData ? (\r\n                    tagData.map((value) => (\r\n                      <Option key={value.tag}>{value.tag}</Option>\r\n                    ))\r\n                  ) : (\r\n                    <Option key={\"no data\"}>{\"no data\"}</Option>\r\n                  )}\r\n                </Select>\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label={!guestLecturer ? \"Lecture Date\" : \"Guest Speaker Date\"}\r\n                name=\"lecture_date\"\r\n                rules={ruleSetRequired}\r\n              >\r\n                <DatePicker />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Bootcamp Week\"\r\n                name=\"bootcamp_week\"\r\n                rules={ruleSetRequired}\r\n              >\r\n                <InputNumber min={1} />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Cohort\" name=\"cohort\" rules={ruleSetRequired}>\r\n                <InputNumber min={1} />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Video Description\"\r\n                name=\"description\"\r\n                rules={ruleSetRequired}\r\n              >\r\n                <Input.TextArea autoSize={{ minRows: 8 }} />\r\n              </Form.Item>\r\n\r\n              <Form.Item label={\"Timestamps\"}>\r\n                <Button\r\n                  onClick={() =>\r\n                    timestampVideoUrl &&\r\n                    timestampVideoUrl.slice(0, 18) === \"https://vimeo.com/\" &&\r\n                    typeof Number(timestampVideoUrl.slice(0, 18)) === \"number\"\r\n                      ? modalDisplay()\r\n                      : message.warn(\r\n                          \"Please select a video or update the video url field\"\r\n                        )\r\n                  }\r\n                >\r\n                  Open Timestamp Editor\r\n                </Button>\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Github Links\">\r\n                <Form.List name=\"github_links\">\r\n                  {(fields, { add, remove }) => (\r\n                    <>\r\n                      {fields.map((field) => (\r\n                        <Space\r\n                          key={field.key}\r\n                          style={{ display: \"flex\", marginBottom: 0 }}\r\n                          align=\"baseline\"\r\n                        >\r\n                          <Form.Item\r\n                            {...field}\r\n                            name={[field.name, \"link\"]}\r\n                            fieldKey={[field.fieldKey, \"link\"]}\r\n                          >\r\n                            <Input placeholder=\"url\" />\r\n                          </Form.Item>\r\n\r\n                          <Form.Item\r\n                            {...field}\r\n                            name={[field.name, \"desc\"]}\r\n                            fieldKey={[field.fieldKey, \"desc\"]}\r\n                          >\r\n                            <Input placeholder=\"description\" />\r\n                          </Form.Item>\r\n\r\n                          <Form.Item\r\n                            {...field}\r\n                            name={[field.name, \"uuid\"]}\r\n                            fieldKey={[field.fieldKey, \"uuid\"]}\r\n                            hidden\r\n                            initialValue={uuidv4()}\r\n                          ></Form.Item>\r\n\r\n                          <MinusCircleOutlined\r\n                            onClick={() => remove(field.name)}\r\n                          />\r\n                        </Space>\r\n                      ))}\r\n                      <Form.Item>\r\n                        <Button\r\n                          type=\"dashed\"\r\n                          onClick={() => add()}\r\n                          icon={<PlusOutlined />}\r\n                        >\r\n                          Add Github Link\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </>\r\n                  )}\r\n                </Form.List>\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Slide Links\">\r\n                <Form.List name=\"slides\">\r\n                  {(fields, { add, remove }) => (\r\n                    <>\r\n                      {fields.map((field) => (\r\n                        <Space\r\n                          key={field.key}\r\n                          style={{ display: \"flex\", marginBottom: 0 }}\r\n                          align=\"baseline\"\r\n                        >\r\n                          <Form.Item\r\n                            {...field}\r\n                            name={[field.name, \"link\"]}\r\n                            fieldKey={[field.fieldKey, \"link\"]}\r\n                          >\r\n                            <Input placeholder=\"url\" />\r\n                          </Form.Item>\r\n\r\n                          <Form.Item\r\n                            {...field}\r\n                            name={[field.name, \"desc\"]}\r\n                            fieldKey={[field.fieldKey, \"desc\"]}\r\n                          >\r\n                            <Input placeholder=\"description\" />\r\n                          </Form.Item>\r\n\r\n                          <Form.Item\r\n                            {...field}\r\n                            name={[field.name, \"uuid\"]}\r\n                            fieldKey={[field.fieldKey, \"uuid\"]}\r\n                            hidden\r\n                            initialValue={uuidv4()}\r\n                          ></Form.Item>\r\n\r\n                          <MinusCircleOutlined\r\n                            onClick={() => remove(field.name)}\r\n                          />\r\n                        </Space>\r\n                      ))}\r\n                      <Form.Item>\r\n                        <Button\r\n                          type=\"dashed\"\r\n                          onClick={() => add()}\r\n                          icon={<PlusOutlined />}\r\n                        >\r\n                          Add Slide Link\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </>\r\n                  )}\r\n                </Form.List>\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Other Links\">\r\n                <Form.List name=\"other_links\">\r\n                  {(fields, { add, remove }) => (\r\n                    <>\r\n                      {fields.map((field) => (\r\n                        <Space\r\n                          key={field.key}\r\n                          style={{ display: \"flex\", marginBottom: 0 }}\r\n                          align=\"baseline\"\r\n                        >\r\n                          <Form.Item\r\n                            {...field}\r\n                            name={[field.name, \"link\"]}\r\n                            fieldKey={[field.fieldKey, \"link\"]}\r\n                          >\r\n                            <Input placeholder=\"url\" />\r\n                          </Form.Item>\r\n                          <Form.Item\r\n                            {...field}\r\n                            name={[field.name, \"desc\"]}\r\n                            fieldKey={[field.fieldKey, \"desc\"]}\r\n                          >\r\n                            <Input placeholder=\"description\" />\r\n                          </Form.Item>\r\n\r\n                          <Form.Item\r\n                            {...field}\r\n                            name={[field.name, \"uuid\"]}\r\n                            fieldKey={[field.fieldKey, \"uuid\"]}\r\n                            hidden\r\n                            initialValue={uuidv4()}\r\n                          ></Form.Item>\r\n\r\n                          <MinusCircleOutlined\r\n                            onClick={() => remove(field.name)}\r\n                          />\r\n                        </Space>\r\n                      ))}\r\n                      <Form.Item>\r\n                        <Button\r\n                          type=\"dashed\"\r\n                          onClick={() => add()}\r\n                          icon={<PlusOutlined />}\r\n                        >\r\n                          Add Other Link\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </>\r\n                  )}\r\n                </Form.List>\r\n              </Form.Item>\r\n\r\n              <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Space>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoachCMS;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js",["124"],"import React, { useEffect, useRef, useState, useContext } from \"react\";\r\nimport { useLocation, Redirect } from \"react-router-dom\";\r\nimport ReactPlayer from \"react-player\";\r\nimport \"./style.css\";\r\nimport { SearchContext } from \"../../contexts/searchContext\";\r\nimport config from \"../../config\";\r\nimport FeedbackForm from \"../FeedbackForm\";\r\nimport { Spin, Row, Col, Space, Button, Divider, Anchor } from \"antd\";\r\n\r\nconst { Link } = Anchor;\r\n\r\nexport default function LectureViewer() {\r\n  const id = useLocation().pathname.split(\"/\").pop();\r\n  const player = useRef(null);\r\n  const [videoData, setVideoData] = useState(false);\r\n  const { searchText } = useContext(SearchContext);\r\n  const [previousSearch] = useState(searchText);\r\n\r\n  useEffect(() => {\r\n    async function getVideoData() {\r\n      const response = await fetch(config.BACKEND_URL_SEARCH_BY_ID + id);\r\n      const data = await response.json();\r\n      setVideoData(data[0]);\r\n    }\r\n    getVideoData();\r\n  }, [id]);\r\n\r\n  if (searchText !== previousSearch) {\r\n    return <Redirect exact to=\"/\" />;\r\n  }\r\n\r\n  function seekToTimestamp(seconds) {\r\n    return player.current.seekTo(seconds);\r\n  }\r\n\r\n  if (!videoData) {\r\n    return (\r\n      <>\r\n        <Spin />\r\n      </>\r\n    );\r\n  } else\r\n    return (\r\n      <>\r\n        <Row justify=\"center\">\r\n          <Col span={15}>\r\n            <div className=\"player-wrapper\">\r\n              <ReactPlayer\r\n                ref={player}\r\n                url={videoData.video_url}\r\n                controls={true}\r\n                className=\"react-player\"\r\n                width=\"95%\"\r\n                height=\"95%\"\r\n              />\r\n            </div>\r\n            <Col span={19}>\r\n              <h1 style={{ padding: \"0px\", marginBottom: \"0px\" }}>\r\n                {videoData.title}\r\n              </h1>\r\n              <h2 style={{ padding: \"0px\" }}>{videoData.lecturer}</h2>\r\n              <Divider style={{ width: \"300px\" }} />\r\n              {videoData.description}\r\n            </Col>\r\n          </Col>\r\n          <Col span={5}>\r\n            <FeedbackForm />\r\n            <Divider orientation=\"left\">Resources</Divider>​\r\n            <Space direction=\"vertical\">\r\n              {[\r\n                ...videoData.github_links,\r\n                ...videoData.slides,\r\n                ...videoData.other_links,\r\n              ].map((value) => (\r\n                <a\r\n                  key={value.uuid}\r\n                  href={value.link}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  {value.desc}\r\n                </a>\r\n              ))}\r\n            </Space>\r\n            <Divider orientation=\"left\">Timestamps</Divider>\r\n            <Space size=\"small\" direction=\"vertical\">\r\n              {videoData.timestamps.map((value) => {\r\n                return (\r\n                  <Button\r\n                    key={value.uuid}\r\n                    style={{ width: \"200px\", textAlign: \"left\" }}\r\n                    onClick={() => seekToTimestamp(value.timeSecondsValue)}\r\n                  >\r\n                    {`${value.timeString} - ${value.timeDesc}`}\r\n                  </Button>\r\n                );\r\n              })}\r\n            </Space>\r\n          </Col>\r\n          <Col span={20}></Col>\r\n        </Row>\r\n      </>\r\n    );\r\n}\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\config.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSLectureEditor\\index.js",["125","126"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Table,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Space,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport config from \"../../config\";\r\nimport {\r\n  CloseCircleOutlined,\r\n  EditOutlined,\r\n  SaveOutlined,\r\n  StopOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst CmsLecturerEditor = ({\r\n  lecturerEditorVisible,\r\n  toggleLecturerDisplay,\r\n  lecturerData,\r\n  updateLecturerData,\r\n  lastLecturerId,\r\n  updateLastLecturerId,\r\n}) => {\r\n  const [lecturerDelete, setLecturerDelete] = useState(null);\r\n  const [lecturerAdd, setLecturerAdd] = useState(null);\r\n  const [form] = Form.useForm();\r\n  const [inputDisabled, setInputDisabled] = useState(true);\r\n  const [lecturerInput, setLecturerInput] = useState(null);\r\n  const [lecturerUpdate, setLecturerUpdate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const deleteLecturer = async () => {\r\n      await fetch(\r\n        config.BACKEND_URL_LECTURERS_DELETE + `${lecturerDelete.key}`,\r\n        {\r\n          method: \"DELETE\",\r\n        }\r\n      );\r\n      updateLecturerData(\r\n        lecturerData.filter((lecturer) => lecturer.key !== lecturerDelete.key)\r\n      );\r\n      message.success(`'${lecturerDelete.lecturer}' has been deleted`);\r\n      setLecturerDelete(null);\r\n    };\r\n    if (lecturerDelete) {\r\n      deleteLecturer();\r\n    }\r\n  }, [lecturerDelete]);\r\n\r\n  useEffect(() => {\r\n    const addLecturer = async () => {\r\n      await fetch(config.BACKEND_URL_LECTURERS_ADD, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ lecturer: lecturerAdd }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      updateLecturerData([\r\n        ...lecturerData,\r\n        { key: lastLecturerId, lecturer: lecturerAdd },\r\n      ]);\r\n      message.success(`'${lecturerAdd}' has been added`);\r\n      setLecturerAdd(null);\r\n    };\r\n    if (lecturerAdd) {\r\n      addLecturer();\r\n    }\r\n  }, [lecturerAdd]);\r\n\r\n  useEffect(() => {\r\n    const updateLecturer = async () => {\r\n      await fetch(config.BACKEND_URL_LECTURERS_UPDATE, {\r\n        method: \"PATCH\",\r\n        body: JSON.stringify(lecturerUpdate),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n    };\r\n    if (lecturerUpdate) {\r\n      updateLecturer();\r\n      message.success(`Lecturer updated`);\r\n      setLecturerUpdate(null);\r\n    }\r\n  }, [lecturerUpdate]);\r\n\r\n  const { Column } = Table;\r\n\r\n  const submitLecturer = (submittedLecturer) => {\r\n    let lecturerCheck = null;\r\n\r\n    if (lecturerData) {\r\n      lecturerCheck = lecturerData.some(\r\n        (value) =>\r\n          value.lecturer.toLowerCase() === submittedLecturer.name.toLowerCase()\r\n      );\r\n      if (lecturerCheck) {\r\n        message.error(`Lecturer already exists`);\r\n        form.resetFields();\r\n      } else {\r\n        updateLastLecturerId(lastLecturerId + 1);\r\n        setLecturerAdd(submittedLecturer.name);\r\n        form.resetFields();\r\n      }\r\n    } else {\r\n      updateLastLecturerId(lastLecturerId + 1);\r\n      setLecturerAdd(submittedLecturer.name);\r\n      form.resetFields();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={lecturerEditorVisible}\r\n      onCancel={() => {\r\n        toggleLecturerDisplay();\r\n        setInputDisabled(!inputDisabled);\r\n      }}\r\n      footer={null}\r\n      closable\r\n      destroyOnClose\r\n    >\r\n      <h3>Lecturer Editor</h3>\r\n      <Form name=\"lecturerform\" onFinish={submitLecturer} form={form}>\r\n        <Space>\r\n          <Form.Item\r\n            label=\"Lecturer Name\"\r\n            name=\"name\"\r\n            rules={[{ required: true }]}\r\n          >\r\n            <Space>\r\n              <Input\r\n                placeholder=\"Enter lecturer name\"\r\n                style={{ width: \"200px\" }}\r\n                disabled={inputDisabled}\r\n              />\r\n              <Button type=\"primary\" htmlType=\"submit\" disabled={inputDisabled}>\r\n                Submit\r\n              </Button>\r\n            </Space>\r\n          </Form.Item>\r\n        </Space>\r\n      </Form>\r\n\r\n      <Table\r\n        dataSource={lecturerData}\r\n        size=\"small\"\r\n        pagination={{ pageSize: 50 }}\r\n        scroll={{ y: 500 }}\r\n      >\r\n        <Column title=\"ID\" dataIndex=\"key\" key=\"key\" />\r\n        <Column\r\n          title=\"Lecturer\"\r\n          key=\"lecturer\"\r\n          render={(record) => (\r\n            <Input\r\n              defaultValue={record.lecturer}\r\n              bordered={false}\r\n              disabled={inputDisabled}\r\n              onChange={(e) =>\r\n                setLecturerInput({\r\n                  updateRecord: record.key,\r\n                  updateValue: e.target.value,\r\n                })\r\n              }\r\n            />\r\n          )}\r\n        />\r\n\r\n        <Column\r\n          title=\"Delete\"\r\n          key=\"delete\"\r\n          render={(record) => (\r\n            <Popconfirm\r\n              title={`Are you sure you want to delete '${record.lecturer}'`}\r\n              okText={`delete`}\r\n              cancelText={`cancel`}\r\n              onConfirm={() => setLecturerDelete(record)}\r\n              disabled={inputDisabled}\r\n            >\r\n              {inputDisabled ? (\r\n                <StopOutlined style={{ color: \"#ccc\" }} />\r\n              ) : (\r\n                <CloseCircleOutlined style={{ color: \"red\" }} />\r\n              )}\r\n            </Popconfirm>\r\n          )}\r\n        />\r\n      </Table>\r\n      {inputDisabled ? (\r\n        <p style={{ color: \"green\" }}>Viewing Mode</p>\r\n      ) : (\r\n        <p style={{ color: \"red\" }}>Editing Mode</p>\r\n      )}\r\n      <Space>\r\n        <Button\r\n          onClick={() => {\r\n            setInputDisabled(!inputDisabled);\r\n          }}\r\n        >\r\n          Edit <EditOutlined />\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            setLecturerUpdate(lecturerInput);\r\n            setLecturerInput(null);\r\n          }}\r\n          disabled={\r\n            (inputDisabled && !lecturerInput) || !lecturerInput ? true : false\r\n          }\r\n        >\r\n          Save <SaveOutlined />\r\n        </Button>\r\n      </Space>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CmsLecturerEditor;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDropdown\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSTagEditor\\index.js",["127","128"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Table,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Space,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport config from \"../../config\";\r\nimport {\r\n  CloseCircleOutlined,\r\n  EditOutlined,\r\n  SaveOutlined,\r\n  StopOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst CmsTagEditor = ({\r\n  tagEditorVisible,\r\n  toggleTagDisplay,\r\n  tagData,\r\n  updateTagData,\r\n  lastTagId,\r\n  updateLastTagData,\r\n}) => {\r\n  const [tagDelete, setTagDelete] = useState(null);\r\n  const [tagAdd, setTagAdd] = useState(null);\r\n  const [form] = Form.useForm();\r\n  const [inputDisabled, setInputDisabled] = useState(true);\r\n  const [tagInput, setTagInput] = useState(null);\r\n  const [tagUpdate, setTagUpdate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const deleteTag = async () => {\r\n      await fetch(config.BACKEND_URL_TAGS_DELETE + `${tagDelete.key}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      updateTagData(tagData.filter((tag) => tag.key !== tagDelete.key));\r\n      message.success(`'${tagDelete.tag}' tag has been deleted`);\r\n      setTagDelete(null);\r\n    };\r\n    if (tagDelete) {\r\n      deleteTag();\r\n    }\r\n  }, [tagDelete]);\r\n\r\n  useEffect(() => {\r\n    const addTag = async () => {\r\n      await fetch(config.BACKEND_URL_TAGS_ADD, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ tag: tagAdd }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      updateTagData([...tagData, { key: lastTagId, tag: tagAdd }]);\r\n      message.success(`'${tagAdd}' tag has been added`);\r\n      setTagAdd(null);\r\n    };\r\n    if (tagAdd) {\r\n      addTag();\r\n    }\r\n  }, [tagAdd]);\r\n\r\n  useEffect(() => {\r\n    const updateTag = async () => {\r\n      await fetch(config.BACKEND_URL_TAGS_UPDATE, {\r\n        method: \"PATCH\",\r\n        body: JSON.stringify(tagUpdate),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n    };\r\n    if (tagUpdate) {\r\n      updateTag();\r\n      message.success(`Tag updated`);\r\n      setTagUpdate(null);\r\n    }\r\n  }, [tagUpdate]);\r\n\r\n  const { Column } = Table;\r\n\r\n  const submitTag = (submittedTag) => {\r\n    let tagCheck = null;\r\n\r\n    if (tagData) {\r\n      tagCheck = tagData.some(\r\n        (value) => value.tag.toLowerCase() === submittedTag.name.toLowerCase()\r\n      );\r\n      if (tagCheck) {\r\n        message.error(`Tag already exists`);\r\n        form.resetFields();\r\n      } else {\r\n        updateLastTagData(lastTagId + 1);\r\n        setTagAdd(submittedTag.name);\r\n        form.resetFields();\r\n      }\r\n    } else {\r\n      updateLastTagData(lastTagId + 1);\r\n      setTagAdd(submittedTag.name);\r\n      form.resetFields();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={tagEditorVisible}\r\n      onCancel={() => {\r\n        toggleTagDisplay();\r\n        setInputDisabled(!inputDisabled);\r\n      }}\r\n      footer={null}\r\n      closable\r\n      destroyOnClose\r\n    >\r\n      <h3>Tag Editor</h3>\r\n      <Form name=\"tagform\" onFinish={submitTag} form={form}>\r\n        <Space>\r\n          <Form.Item label=\"Tag Name\" name=\"name\" rules={[{ required: true }]}>\r\n            <Space>\r\n              <Input\r\n                placeholder=\"Enter tag name\"\r\n                style={{ width: \"200px\" }}\r\n                disabled={inputDisabled}\r\n              />\r\n              <Button type=\"primary\" htmlType=\"submit\" disabled={inputDisabled}>\r\n                Submit\r\n              </Button>\r\n            </Space>\r\n          </Form.Item>\r\n        </Space>\r\n      </Form>\r\n\r\n      <Table\r\n        dataSource={tagData}\r\n        size=\"small\"\r\n        pagination={{ pageSize: 50 }}\r\n        scroll={{ y: 500 }}\r\n      >\r\n        <Column title=\"ID\" dataIndex=\"key\" key=\"key\" />\r\n        <Column\r\n          title=\"Tag\"\r\n          key=\"tag\"\r\n          render={(record) => (\r\n            <Input\r\n              defaultValue={record.tag}\r\n              bordered={false}\r\n              disabled={inputDisabled}\r\n              onChange={(e) =>\r\n                setTagInput({\r\n                  updateRecord: record.key,\r\n                  updateValue: e.target.value,\r\n                })\r\n              }\r\n            />\r\n          )}\r\n        />\r\n\r\n        <Column\r\n          title=\"Delete\"\r\n          key=\"delete\"\r\n          render={(record) => (\r\n            <Popconfirm\r\n              title={`Are you sure you want to delete '${record.tag}'`}\r\n              okText={`delete`}\r\n              cancelText={`cancel`}\r\n              onConfirm={() => setTagDelete(record)}\r\n              disabled={inputDisabled}\r\n            >\r\n              {inputDisabled ? (\r\n                <StopOutlined style={{ color: \"#ccc\" }} />\r\n              ) : (\r\n                <CloseCircleOutlined style={{ color: \"red\" }} />\r\n              )}\r\n            </Popconfirm>\r\n          )}\r\n        />\r\n      </Table>\r\n      {inputDisabled ? (\r\n        <p style={{ color: \"green\" }}>Viewing Mode</p>\r\n      ) : (\r\n        <p style={{ color: \"red\" }}>Editing Mode</p>\r\n      )}\r\n      <Space>\r\n        <Button\r\n          onClick={() => {\r\n            setInputDisabled(!inputDisabled);\r\n          }}\r\n        >\r\n          Edit <EditOutlined />\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={() => {\r\n            setTagUpdate(tagInput);\r\n            setTagInput(null);\r\n          }}\r\n          disabled={(inputDisabled && !tagInput) || !tagInput ? true : false}\r\n        >\r\n          Save <SaveOutlined />\r\n        </Button>\r\n      </Space>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CmsTagEditor;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSTimestampSelector\\index.js",["129"],"import React, { useRef, useState, useCallback } from \"react\";\r\nimport { Modal, Button, Input, Form, Space, TimePicker, message } from \"antd\";\r\nimport ReactPlayer from \"react-player\";\r\nimport {\r\n  MinusCircleOutlined,\r\n  PlaySquareFilled,\r\n  PlusOutlined,\r\n} from \"@ant-design/icons\";\r\nimport moment from \"moment\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst TimestampSelector = ({\r\n  timestampsVisible,\r\n  modalDisplay,\r\n  timestampVideoUrl,\r\n  ruleSetRequired,\r\n  submitFailed,\r\n  getTimeStampData,\r\n  modalHide,\r\n}) => {\r\n  const player = useRef(null);\r\n  const [form] = Form.useForm();\r\n  const [seekTimeMoment, setSeekTimeMoment] = useState(\r\n    moment(\"00:00:00\", \"HH:mm:ss\")\r\n  );\r\n  const [seekTimeSeconds, setSeekTimeSeconds] = useState(0);\r\n  const [seekTimeString, setSeekTimeString] = useState(\"00:00:00\");\r\n  const [playerBuffering, setPlayerBuffering] = useState(false);\r\n\r\n  const submitForm = useCallback(\r\n    (timestamps) => {\r\n      getTimeStampData(timestamps);\r\n      message.success(\"Timestamps saved\", 1.5, modalHide());\r\n    },\r\n    [getTimeStampData, modalHide]\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Timestamp Selector\"\r\n      visible={timestampsVisible}\r\n      onOk={form.submit}\r\n      onCancel={modalDisplay}\r\n      width=\"fit-content\"\r\n      destroyOnClose\r\n      okText={\"Finish\"}\r\n    >\r\n      <>\r\n        {timestampVideoUrl ? (\r\n          <ReactPlayer\r\n            ref={player}\r\n            url={timestampVideoUrl}\r\n            controls={true}\r\n            style={{ marginBottom: \"20px\" }}\r\n            onBuffer={() => setPlayerBuffering(true)}\r\n            onBufferEnd={() => setPlayerBuffering(false)}\r\n          />\r\n        ) : (\r\n          <p>select a video file or add url</p>\r\n        )}\r\n      </>\r\n      <Form\r\n        name=\"cms_timestamps\"\r\n        form={form}\r\n        initialValues={{\r\n          remember: false,\r\n        }}\r\n        onFinish={submitForm}\r\n        onFinishFailed={(value) => submitFailed(value)}\r\n      >\r\n        <Form.Item label=\"Timestamps\" required>\r\n          <Form.List name=\"timestamps\" rules={ruleSetRequired}>\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field, index) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timeMoment\"]}\r\n                      fieldKey={[field.fieldKey, \"timeMoment\"]}\r\n                      style={{ width: \"140px\" }}\r\n                      rules={ruleSetRequired}\r\n                      initialValue={seekTimeMoment}\r\n                    >\r\n                      <TimePicker />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timeDesc\"]}\r\n                      label=\"Description\"\r\n                      style={{ width: \"350px\" }}\r\n                      fieldKey={[field.fieldKey, \"timeDesc\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timeSecondsValue\"]}\r\n                      fieldKey={[field.fieldKey, \"timeSecondsValue\"]}\r\n                      initialValue={seekTimeSeconds}\r\n                      hidden\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timeString\"]}\r\n                      fieldKey={[field.fieldKey, \"timeString\"]}\r\n                      initialValue={seekTimeString}\r\n                      hidden\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"uuid\"]}\r\n                      fieldKey={[field.fieldKey, \"uuid\"]}\r\n                      hidden\r\n                      initialValue={uuidv4()}\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    disabled={playerBuffering}\r\n                    te\r\n                    type=\"dashed\"\r\n                    onClick={() => {\r\n                      const timeString = new Date(\r\n                        Math.floor(player.current.getCurrentTime()) * 1000\r\n                      )\r\n                        .toISOString()\r\n                        .substr(11, 8);\r\n                      setSeekTimeMoment(moment(timeString, \"HH:mm:ss\"));\r\n                      setSeekTimeSeconds(\r\n                        Math.floor(player.current.getCurrentTime())\r\n                      );\r\n                      setSeekTimeString(timeString);\r\n                      add();\r\n                    }}\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    {playerBuffering ? \"Loading Timestamp\" : \"Add Timestamp\"}\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default TimestampSelector;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSVideoSelector\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FilterBox\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSDescription\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMSMenu\\index.js",[],["130","131"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Footer\\index.js",["132","133","134"],"import React from \"react\";\r\nimport { Row, Col, Space } from \"antd\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <>\r\n      {/* <Col\r\n        span={24}\r\n        style={{\r\n          backgroundColor: \"#f2f2f2\",\r\n          bottom: \"0\",\r\n          height: \"500px\",\r\n          border: \"1px solid green\",\r\n          position: \"absolute\",\r\n        }}\r\n      ></Col> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n",{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":15,"column":8,"nodeType":"141","messageId":"142","endLine":15,"endColumn":14},{"ruleId":"143","severity":1,"message":"144","line":123,"column":6,"nodeType":"145","endLine":123,"endColumn":21,"suggestions":"146"},{"ruleId":"143","severity":1,"message":"144","line":133,"column":6,"nodeType":"145","endLine":133,"endColumn":21,"suggestions":"147"},{"ruleId":"139","severity":1,"message":"148","line":10,"column":9,"nodeType":"141","messageId":"142","endLine":10,"endColumn":13},{"ruleId":"143","severity":1,"message":"149","line":52,"column":6,"nodeType":"145","endLine":52,"endColumn":22,"suggestions":"150"},{"ruleId":"143","severity":1,"message":"151","line":74,"column":6,"nodeType":"145","endLine":74,"endColumn":19,"suggestions":"152"},{"ruleId":"143","severity":1,"message":"153","line":47,"column":6,"nodeType":"145","endLine":47,"endColumn":17,"suggestions":"154"},{"ruleId":"143","severity":1,"message":"155","line":66,"column":6,"nodeType":"145","endLine":66,"endColumn":14,"suggestions":"156"},{"ruleId":"139","severity":1,"message":"157","line":6,"column":3,"nodeType":"141","messageId":"142","endLine":6,"endColumn":19},{"ruleId":"135","replacedBy":"158"},{"ruleId":"137","replacedBy":"159"},{"ruleId":"139","severity":1,"message":"160","line":2,"column":10,"nodeType":"141","messageId":"142","endLine":2,"endColumn":13},{"ruleId":"139","severity":1,"message":"161","line":2,"column":15,"nodeType":"141","messageId":"142","endLine":2,"endColumn":18},{"ruleId":"139","severity":1,"message":"162","line":2,"column":20,"nodeType":"141","messageId":"142","endLine":2,"endColumn":25},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tags'. Either include it or remove the dependency array.","ArrayExpression",["165"],["166"],"'Link' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'lecturerData' and 'updateLecturerData'. Either include them or remove the dependency array. If 'updateLecturerData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["167"],"React Hook useEffect has missing dependencies: 'lastLecturerId', 'lecturerData', and 'updateLecturerData'. Either include them or remove the dependency array. If 'updateLecturerData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["168"],"React Hook useEffect has missing dependencies: 'tagData' and 'updateTagData'. Either include them or remove the dependency array. If 'updateTagData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["169"],"React Hook useEffect has missing dependencies: 'lastTagId', 'tagData', and 'updateTagData'. Either include them or remove the dependency array. If 'updateTagData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["170"],"'PlaySquareFilled' is defined but never used.",["163"],["164"],"'Row' is defined but never used.","'Col' is defined but never used.","'Space' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},"Update the dependencies array to be: [guestLecturer, tags]",{"range":"183","text":"184"},"Update the dependencies array to be: [tags, tutorialVideo]",{"range":"185","text":"186"},"Update the dependencies array to be: [lecturerData, lecturerDelete, updateLecturerData]",{"range":"187","text":"188"},"Update the dependencies array to be: [lastLecturerId, lecturerAdd, lecturerData, updateLecturerData]",{"range":"189","text":"190"},"Update the dependencies array to be: [tagData, tagDelete, updateTagData]",{"range":"191","text":"192"},"Update the dependencies array to be: [lastTagId, tagAdd, tagData, updateTagData]",{"range":"193","text":"194"},[3926,3941],"[guestLecturer, tags]",[4256,4271],"[tags, tutorialVideo]",[1344,1360],"[lecturerData, lecturerDelete, updateLecturerData]",[1932,1945],"[lastLecturerId, lecturerAdd, lecturerData, updateLecturerData]",[1161,1172],"[tagData, tagDelete, updateTagData]",[1655,1663],"[lastTagId, tagAdd, tagData, updateTagData]"]
