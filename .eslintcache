[{"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\index.js":"1","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js":"2","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js":"3","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js":"4","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js":"5","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js":"6","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js":"7","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js":"8","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js":"9","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js":"10","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js":"11","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js":"12","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js":"13","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js":"14","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\tags.js":"15","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\tutors.js":"16","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js":"17","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js":"18","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\searchContext.js":"19"},{"size":913,"mtime":1610023759904,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1609945864379,"results":"22","hashOfConfig":"21"},{"size":668,"mtime":1610034666499,"results":"23","hashOfConfig":"21"},{"size":492,"mtime":1609945864375,"results":"24","hashOfConfig":"21"},{"size":1811,"mtime":1610033980513,"results":"25","hashOfConfig":"21"},{"size":475,"mtime":1609945864377,"results":"26","hashOfConfig":"21"},{"size":159,"mtime":1609945864376,"results":"27","hashOfConfig":"21"},{"size":3231,"mtime":1610033881105,"results":"28","hashOfConfig":"21"},{"size":2089,"mtime":1610015884272,"results":"29","hashOfConfig":"21"},{"size":1599,"mtime":1610034810932,"results":"30","hashOfConfig":"21"},{"size":12487,"mtime":1610029557283,"results":"31","hashOfConfig":"21"},{"size":512,"mtime":1609945864374,"results":"32","hashOfConfig":"21"},{"size":1990,"mtime":1610026109784,"results":"33","hashOfConfig":"21"},{"size":174,"mtime":1609945864374,"results":"34","hashOfConfig":"21"},{"size":366,"mtime":1610015884273,"results":"35","hashOfConfig":"21"},{"size":335,"mtime":1610015884273,"results":"36","hashOfConfig":"21"},{"size":3700,"mtime":1609945864371,"results":"37","hashOfConfig":"21"},{"size":166,"mtime":1609945864370,"results":"38","hashOfConfig":"21"},{"size":393,"mtime":1610026708593,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"tl36v",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\index.js",[],["84","85"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\reportWebVitals.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Auth.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\adminUsersContext.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\App\\App.js",["86","87","88","89"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport { AuthContext } from \"../../firebase/Auth\";\r\nimport { AdminUsersContext } from \"../../contexts/adminUsersContext\";\r\n\r\nimport VideoSelectionPage from \"../VideoSelectionPage\";\r\nimport LectureViewer from \"../LectureViewer\";\r\nimport CoachCMS from \"../CoachCMS\";\r\nimport HeaderBar from \"../HeaderBar\";\r\nimport Login from \"../Login\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport Restricted from \"../Restricted\";\r\n\r\nconst gridStyle = {\r\n  width: \"25%\",\r\n  textAlign: \"center\",\r\n};\r\n\r\nconst api = `/`;\r\n\r\nfunction App() {\r\n  console.log(\"app firing\");\r\n  const { currentUser } = useContext(AuthContext);\r\n  const adminUsers = useContext(AdminUsersContext);\r\n\r\n  return (\r\n    <>\r\n      <PrivateRoute\r\n        path=\"/\"\r\n        render={() => (\r\n          <>\r\n            <HeaderBar />\r\n          </>\r\n        )}\r\n      />\r\n\r\n      <Switch>\r\n        <Route exact path=\"/login\" component={Login} />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <>\r\n              <VideoSelectionPage />\r\n            </>\r\n          )}\r\n        />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          path={\"/videoviewer/:id\"}\r\n          render={() => (\r\n            <>\r\n              <LectureViewer />\r\n            </>\r\n          )}\r\n        />\r\n\r\n        <PrivateRoute\r\n          exact\r\n          path={\"/cms\"}\r\n          render={() =>\r\n            adminUsers[0].find((user) => user.email === currentUser.email) ? (\r\n              <>\r\n                <CoachCMS />\r\n              </>\r\n            ) : (\r\n              <Restricted />\r\n            )\r\n          }\r\n        />\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\firebase\\Base.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\adminusers.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\LectureViewer\\index.js",["90"],"import React, { useEffect, useRef, useState, useContext } from \"react\";\r\nimport { useLocation, Redirect } from \"react-router-dom\";\r\nimport ReactPlayer from \"react-player\";\r\nimport \"./style.css\";\r\nimport FeedbackForm from \"../FeedbackForm\";\r\nimport { Tabs, Spin } from \"antd\";\r\nimport { SearchContext } from \"../../contexts/searchContext\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function LectureViewer() {\r\n  const id = useLocation().pathname.split(\"/\").pop();\r\n  const player = useRef(null);\r\n  const [videoData, setVideoData] = useState();\r\n  const { searchText } = useContext(SearchContext);\r\n  const [previousSearch] = useState(searchText);\r\n\r\n  useEffect(() => {\r\n    async function getVideoData() {\r\n      const response = await fetch(\r\n        process.env.REACT_APP_BACKEND_URL + `/${id}`\r\n      );\r\n      const data = await response.json();\r\n      setVideoData(data[0]);\r\n    }\r\n    getVideoData();\r\n  }, []);\r\n\r\n  if (searchText !== previousSearch) {\r\n    return <Redirect exact to=\"/\" />;\r\n  }\r\n\r\n  function seekToTimestamp(seconds) {\r\n    return player.current.seekTo(seconds);\r\n  }\r\n\r\n  if (videoData === null || videoData === undefined) {\r\n    return (\r\n      <>\r\n        <Spin />\r\n      </>\r\n    );\r\n  } else\r\n    return (\r\n      <>\r\n        <h1>\r\n          {videoData.title} - {videoData.lecturer}\r\n        </h1>\r\n        <p>\r\n          <strong>video id:</strong> {videoData.id}\r\n        </p>\r\n        <div id=\"display\">\r\n          <ReactPlayer ref={player} url={videoData.video_url} controls={true} />\r\n          <div id=\"video-sidebar\">\r\n            <div id=\"video-timestamps\">\r\n              <h3>Timestamps</h3>\r\n              {videoData.timestamps.map((value) => {\r\n                return (\r\n                  <div>\r\n                    <button\r\n                      onClick={() => seekToTimestamp(value.timeSecondsValue)}\r\n                    >\r\n                      {`${value.timeString} - ${value.timeDesc}`}\r\n                    </button>\r\n                    <br />\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n\r\n            <Tabs size=\"small\" style={{ width: \"500px\" }} defaultActiveKey=\"1\">\r\n              <TabPane tab=\"Video Description\" key=\"1\">\r\n                <p>{videoData.description}</p>\r\n              </TabPane>\r\n              <TabPane tab=\"Resources\" key=\"2\">\r\n                Here are some resource links <br />\r\n                <a\r\n                  href={videoData.github_links}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Github\r\n                </a>\r\n                <br />\r\n                <a\r\n                  href={videoData.slides}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Slides\r\n                </a>\r\n                <br />\r\n                <a\r\n                  href={videoData.other_links}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Additional Reading\r\n                </a>\r\n              </TabPane>\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n        <FeedbackForm />\r\n      </>\r\n    );\r\n}\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Login\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\VideoSelectionPage\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\CoachCMS\\index.js",["91","92"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  DatePicker,\r\n  InputNumber,\r\n  Space,\r\n  Select,\r\n  TimePicker,\r\n  Spin,\r\n} from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport selectTags from \"../../data/tags\"; //new datasource, see data folder /******** API + DB TABLE REQUIRED ********/\r\nimport tutors from \"../../data/tutors\"; //new datasource, see data folder /******** API + DB TABLE REQUIRED ********/\r\nimport { SearchContext } from \"../../contexts/searchContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst { Option } = Select;\r\n\r\n//global required field rules object, default false\r\nconst ruleSetRequired = [\r\n  {\r\n    required: true,\r\n    message: \"Input required\",\r\n  },\r\n];\r\n\r\n//simple layout configuation objects\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 8,\r\n  },\r\n};\r\n\r\n//start of component function\r\nfunction CoachCMS() {\r\n  const [tags, setTags] = useState([]); //used for tags field\r\n  const [vimeoVideoSelect, setVimeoVideoSelect] = useState([]); //used for API call to vimeo for video selector\r\n  const { searchText } = useContext(SearchContext);\r\n  const [previousSearch] = useState(searchText);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    async function getVimeoVideoList() {\r\n      const response = await fetch(`https://api.vimeo.com/me/videos`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: \"bearer \" + process.env.REACT_APP_VIMEO_TOKEN,\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/vnd.vimeo.*+json;version=3.4\",\r\n        },\r\n      });\r\n      const data = await response.json();\r\n\r\n      setVimeoVideoSelect(\r\n        <Select\r\n          style={{ width: 250 }}\r\n          onChange={(value) => {\r\n            form.setFieldsValue({\r\n              title: value[0],\r\n              video_url: value[1],\r\n              thumbnail_url: value[2],\r\n            });\r\n          }}\r\n        >\r\n          {data.data.map((video) => (\r\n            <Option\r\n              key={video.link}\r\n              value={[\r\n                video.name,\r\n                video.link,\r\n                video.pictures.sizes[5].link,\r\n                video.created_time,\r\n              ]}\r\n            >\r\n              {`${video.name} - ${video.created_time\r\n                .split(\"T\")[0]\r\n                .split(\"-\")\r\n                .reverse()\r\n                .join(\"-\")}`}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      );\r\n    }\r\n    getVimeoVideoList();\r\n  }, []);\r\n\r\n  if (searchText !== previousSearch) {\r\n    return <Redirect exact to=\"/\" />;\r\n  }\r\n\r\n  //time converstion function for form submit object, returns total seconds for each instance\r\n  function timeCovertToSeconds(timeString) {\r\n    const timeSplit = String(timeString).split(\" \")[4].split(\":\");\r\n    const hoursToSeconds = Number(timeSplit[0]) * 60 * 60;\r\n    const minutesToSeconds = Number(timeSplit[1]) * 60;\r\n    const timeInSeconds =\r\n      hoursToSeconds + minutesToSeconds + Number(timeSplit[2]);\r\n    return timeInSeconds;\r\n  }\r\n\r\n  function convertArrayToString(array) {\r\n    return array.map((value) => JSON.stringify(value).split('\"')[3]);\r\n  }\r\n\r\n  //submit form function\r\n  const submitForm = (values) => {\r\n    const timestamps = [];\r\n    values.timestamps.map((timeObj) => {\r\n      timestamps.push({\r\n        timeString: String(timeObj.timestampSelect._d).split(\" \")[4],\r\n        timeSecondsValue: timeCovertToSeconds(timeObj.timestampSelect._d),\r\n        timeDesc: timeObj.timestampDesc,\r\n      });\r\n    });\r\n\r\n    postResource({\r\n      ...values,\r\n      tags: tags,\r\n      date: String(values.lecture_date._d).split(\" \").slice(0, 4).join(\" \"),\r\n      timestamps: timestamps,\r\n      other_links: convertArrayToString(values.other_links),\r\n      slides: convertArrayToString(values.slides),\r\n      github_links: convertArrayToString(values.git_links),\r\n    });\r\n    onReset();\r\n  };\r\n\r\n  //form reset button function\r\n  const onReset = () => {\r\n    form.resetFields();\r\n    form.setFieldsValue({\r\n      vimeoAPI: \"\",\r\n    });\r\n    setTags([]);\r\n  };\r\n\r\n  //Post request async function\r\n  async function postResource(resource) {\r\n    const api = \"/\";\r\n    await fetch(process.env.REACT_APP_BACKEND_URL + api, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(resource),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n\r\n  //api call to vimeo for video selection, also creates and populates select component input\r\n\r\n  //start of rendering\r\n  return (\r\n    <>\r\n      <h1>Coach CMS Form</h1>\r\n\r\n      <Form\r\n        {...layout}\r\n        name=\"cms\"\r\n        form={form}\r\n        initialValues={{\r\n          remember: false,\r\n        }}\r\n        onFinish={submitForm}\r\n      >\r\n        <Form.Item label=\"Vimeo API Video Select\">\r\n          {!!vimeoVideoSelect ? vimeoVideoSelect : <Spin />}\r\n        </Form.Item>\r\n        <Form.Item label=\"Video Title\" name=\"title\" rules={ruleSetRequired}>\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Lecturer / Speaker Name\"\r\n          name=\"lecturer\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Select allowClear>{tutors.map((tutor) => tutor)}</Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Video URL\" name=\"video_url\" rules={ruleSetRequired}>\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Thumbnail URL\"\r\n          name=\"thumbnail_url\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item label=\"Tags\" rules={ruleSetRequired}>\r\n          <Select\r\n            name=\"tags\"\r\n            mode=\"multiple\"\r\n            value={tags}\r\n            allowClear\r\n            style={{ width: \"100%\" }}\r\n            placeholder=\"Select tags\"\r\n            onChange={(value) => {\r\n              setTags(value);\r\n            }}\r\n          >\r\n            {selectTags}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Lecture Date\"\r\n          name=\"lecture_date\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <DatePicker />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Bootcamp Week\"\r\n          name=\"bootcamp_week\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <InputNumber min={1} />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Video Description\"\r\n          name=\"description\"\r\n          rules={ruleSetRequired}\r\n        >\r\n          <Input.TextArea autoSize={{ minRows: 8 }} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Timestamps\" required>\r\n          <Form.List name=\"timestamps\" rules={ruleSetRequired}>\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timestampSelect\"]}\r\n                      fieldKey={[field.fieldKey, \"timestampSelect\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <TimePicker />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"timestampDesc\"]}\r\n                      label=\"Description\"\r\n                      style={{ width: \"350px\" }}\r\n                      fieldKey={[field.fieldKey, \"timestampDesc\"]}\r\n                      rules={ruleSetRequired}\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Timestamp\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Github Links\">\r\n          <Form.List name=\"git_links\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"gitlink\"]}\r\n                      style={{ width: \"300px\" }}\r\n                      fieldKey={[field.fieldKey, \"gitlink\"]}\r\n                    >\r\n                      <Input placeholder=\"url\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Github Link\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Slide Links\">\r\n          <Form.List name=\"slides\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"slidelink\"]}\r\n                      style={{ width: \"300px\" }}\r\n                      fieldKey={[field.fieldKey, \"slidelink\"]}\r\n                    >\r\n                      <Input placeholder=\"url\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Slide Link\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Other Links\">\r\n          <Form.List name=\"other_links\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map((field) => (\r\n                  <Space\r\n                    key={field.key}\r\n                    style={{ display: \"flex\", marginBottom: 0 }}\r\n                    align=\"baseline\"\r\n                  >\r\n                    <Form.Item\r\n                      {...field}\r\n                      name={[field.name, \"otherlink\"]}\r\n                      style={{ width: \"300px\" }}\r\n                      fieldKey={[field.fieldKey, \"otherlink\"]}\r\n                    >\r\n                      <Input placeholder=\"url\" />\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => add()}\r\n                    block\r\n                    icon={<PlusOutlined />}\r\n                  >\r\n                    Add Other Link\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n          <Button htmlType=\"button\" onClick={onReset}>\r\n            Reset\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CoachCMS;\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\PrivateRoute\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\HeaderBar\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\Restricted\\index.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\tags.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\data\\tutors.js",[],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\FeedbackForm\\index.js",["93"],"import React, { useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./style.css\";\r\nimport { Modal, Button, Input } from \"antd\";\r\nimport { message, Space } from \"antd\";\r\n\r\nconst { TextArea } = Input;\r\n\r\n//Feedback success messages. Edit these to display different messages depending the success of the feedback form submit.\r\n\r\nfunction successMsg() { //Displays on feedback success\r\n  message.success(\"Thanks for your feedback!\");\r\n}\r\n\r\nfunction errorMsg() {//Displays on feedback error\r\n  message.error(\"An error occured. Please try again.\");\r\n}\r\n\r\n//Gets the video id from the url\r\nlet url = window.location.href; //gets the whole url\r\nlet split = url.split(\"/\"); //splits the url into an array by /\r\nlet ref = split[split.length - 1]; //Collects the last part of the array, which in this case will be the video id that is displaying on this page\r\n\r\n//Sets whether or not the modal is visable\r\nexport default function FeedbackModal() {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n\r\n  //Posts the feedback to the database\r\n  function postFeedback(value) {//Value is the feedback to be submitted\r\n    fetch(`http://localhost:5000/feedback`, { //Change this url on deployment\r\n      method: \"post\",\r\n      body: JSON.stringify({\r\n        videoId: value.videoId, //Taken from ref - see feedbackToSubmit below\r\n        feedback: value.feedback,\r\n      }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      //Validation: ContentType\r\n    })\r\n      .then((res) => res.json()) //res.json() is an async function\r\n      .then((data) => {\r\n        console.log(data, \"Thanks for the feedback: \" + feedback);\r\n        setFeedback(\"\");//Resets the form\r\n\r\n        setIsModalVisible(false); //closes the modal\r\n        successMsg(); //message confirming to the user that the feedback has gone through\r\n      }) \r\n      .catch((error) => {\r\n        errorMsg(); //message alerting user that there has been an error and they may need to try again\r\n        console.log(error, \"my error\");\r\n      }); //uncaught promise rejection. The promise throws and error and I need to catch otherwise it will be thrown into the ether\r\n  }\r\n\r\n  //This function changes the feedback state to whatever is inserted into the feedback textbox onChange\r\n  function handleChange(e) {\r\n    // e.preventDefault();\r\n    if (e.target.id === \"feedback\") {\r\n      setFeedback(e.target.value);\r\n    }\r\n  }\r\n\r\n  //handleSubmit takes the feedback state, and the video id (from params; see \"ref\" above) and posts it to postFeedback as an object\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const feedbackToSubmit = {\r\n      videoId: ref,\r\n      feedback: feedback,\r\n    };\r\n    postFeedback(feedbackToSubmit);\r\n    // console.log({feedbackToSubmit});\r\n  }\r\n  const showModal = () => {//Sets modal visibility to true\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleCancel = () => {//Sets modal visibility to false, used if the user has pressed cancel\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        Give Feedback\r\n      </Button>\r\n      <Modal\r\n        title=\"Give Feedback on this lecture\"\r\n        visible={isModalVisible}\r\n        onOk={handleSubmit}\r\n        onCancel={handleCancel}\r\n      >\r\n        <div>\r\n          <div id=\"feedback-form-container\">\r\n            <form>\r\n              <TextArea\r\n                id=\"feedback\"\r\n                placeholder=\"Insert Feedback\"\r\n                value={feedback}\r\n                onChange={handleChange}\r\n              />\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\components\\ContentManagementLink\\index.js",[],["94","95"],"C:\\Users\\Will\\Documents\\School of Code\\Course\\Project\\front-end-final-project-code-goblins\\src\\contexts\\searchContext.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":29,"nodeType":"102","messageId":"103","endLine":1,"endColumn":38},{"ruleId":"100","severity":1,"message":"104","line":1,"column":40,"nodeType":"102","messageId":"103","endLine":1,"endColumn":48},{"ruleId":"100","severity":1,"message":"105","line":15,"column":7,"nodeType":"102","messageId":"103","endLine":15,"endColumn":16},{"ruleId":"100","severity":1,"message":"106","line":20,"column":7,"nodeType":"102","messageId":"103","endLine":20,"endColumn":10},{"ruleId":"107","severity":1,"message":"108","line":27,"column":6,"nodeType":"109","endLine":27,"endColumn":8,"suggestions":"110"},{"ruleId":"107","severity":1,"message":"111","line":98,"column":6,"nodeType":"109","endLine":98,"endColumn":8,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":121,"column":37,"nodeType":"115","messageId":"116","endLine":121,"endColumn":39},{"ruleId":"100","severity":1,"message":"117","line":5,"column":19,"nodeType":"102","messageId":"103","endLine":5,"endColumn":24},{"ruleId":"96","replacedBy":"118"},{"ruleId":"98","replacedBy":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'gridStyle' is assigned a value but never used.","'api' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["122"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["123"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Space' is defined but never used.",["120"],["121"],"no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [id]",{"range":"128","text":"129"},"Update the dependencies array to be: [form]",{"range":"130","text":"131"},[920,922],"[id]",[2711,2713],"[form]"]